"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[119],{3398:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2c5a28ab",path:"/kernel/memory/virtualization.html",title:"Memory Virtualization",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"VM Exit",slug:"vm-exit",children:[{level:3,title:"kvm_handle_guest_abort",slug:"kvm-handle-guest-abort",children:[]}]},{level:2,title:"Reference",slug:"reference",children:[]}],filePathRelative:"kernel/memory/virtualization.md",git:{updatedTime:1624963147e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:1}]}}},3706:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="memory-virtualization" tabindex="-1"><a class="header-anchor" href="#memory-virtualization" aria-hidden="true">#</a> Memory Virtualization</h1><h2 id="vm-exit" tabindex="-1"><a class="header-anchor" href="#vm-exit" aria-hidden="true">#</a> VM Exit</h2><p>Memory Data Abort causes vm exiting, and <code>kvm_handle_guest_abort</code> should handle it.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> exit_handle_fn <span class="token function">kvm_get_exit_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        u32 hsr <span class="token operator">=</span> <span class="token function">kvm_vcpu_get_hsr</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        u8 hsr_ec <span class="token operator">=</span> <span class="token function">ESR_ELx_EC</span><span class="token punctuation">(</span>hsr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> arm_exit_handlers<span class="token punctuation">[</span>hsr_ec<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> exit_handle_fn arm_exit_handlers<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ESR_ELx_EC_MAX<span class="token punctuation">]</span>  <span class="token operator">=</span> kvm_handle_unknown_ec<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_WFx<span class="token punctuation">]</span>        <span class="token operator">=</span> kvm_handle_wfx<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_CP15_32<span class="token punctuation">]</span>    <span class="token operator">=</span> kvm_handle_cp15_32<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_CP15_64<span class="token punctuation">]</span>    <span class="token operator">=</span> kvm_handle_cp15_64<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_CP14_MR<span class="token punctuation">]</span>    <span class="token operator">=</span> kvm_handle_cp14_32<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_CP14_LS<span class="token punctuation">]</span>    <span class="token operator">=</span> kvm_handle_cp14_load_store<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_CP14_64<span class="token punctuation">]</span>    <span class="token operator">=</span> kvm_handle_cp14_64<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_HVC32<span class="token punctuation">]</span>      <span class="token operator">=</span> handle_hvc<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_SMC32<span class="token punctuation">]</span>      <span class="token operator">=</span> handle_smc<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_HVC64<span class="token punctuation">]</span>      <span class="token operator">=</span> handle_hvc<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_SMC64<span class="token punctuation">]</span>      <span class="token operator">=</span> handle_smc<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_SYS64<span class="token punctuation">]</span>      <span class="token operator">=</span> kvm_handle_sys_reg<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_SVE<span class="token punctuation">]</span>        <span class="token operator">=</span> handle_sve<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_IABT_LOW<span class="token punctuation">]</span>   <span class="token operator">=</span> kvm_handle_guest_abort<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_DABT_LOW<span class="token punctuation">]</span>   <span class="token operator">=</span> kvm_handle_guest_abort<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_SOFTSTP_LOW<span class="token punctuation">]</span><span class="token operator">=</span> kvm_handle_guest_debug<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_WATCHPT_LOW<span class="token punctuation">]</span><span class="token operator">=</span> kvm_handle_guest_debug<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_BREAKPT_LOW<span class="token punctuation">]</span><span class="token operator">=</span> kvm_handle_guest_debug<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_BKPT32<span class="token punctuation">]</span>     <span class="token operator">=</span> kvm_handle_guest_debug<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_BRK64<span class="token punctuation">]</span>      <span class="token operator">=</span> kvm_handle_guest_debug<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_FP_ASIMD<span class="token punctuation">]</span>   <span class="token operator">=</span> handle_no_fpsimd<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>ESR_ELx_EC_PAC<span class="token punctuation">]</span>        <span class="token operator">=</span> kvm_handle_ptrauth<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="kvm-handle-guest-abort" tabindex="-1"><a class="header-anchor" href="#kvm-handle-guest-abort" aria-hidden="true">#</a> kvm_handle_guest_abort</h3><p>This function handles all 2nd-stage aborts. Two cases could cause 2nd-stage aborts.</p><ul><li>guest needs more memory and we must allocate an appropriate page</li><li>guest tried to access I/O memory, which is emulated by user space</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">kvm_handle_guest_abort</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">kvm_run</span> <span class="token operator">*</span>run<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> fault_status<span class="token punctuation">;</span>\n        <span class="token class-name">phys_addr_t</span> fault_ipa<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">kvm_memory_slot</span> <span class="token operator">*</span>memslot<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> hva<span class="token punctuation">;</span>\n        bool is_iabt<span class="token punctuation">,</span> write_fault<span class="token punctuation">,</span> writable<span class="token punctuation">;</span>\n        <span class="token class-name">gfn_t</span> gfn<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> ret<span class="token punctuation">,</span> idx<span class="token punctuation">;</span>\n\n        fault_status <span class="token operator">=</span> <span class="token function">kvm_vcpu_trap_get_fault_type</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        fault_ipa <span class="token operator">=</span> <span class="token function">kvm_vcpu_get_fault_ipa</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        is_iabt <span class="token operator">=</span> <span class="token function">kvm_vcpu_trap_is_iabt</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol><li>Synchronous External abort</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/* Shared ISS fault status code(IFSC/DFSC) for Data/Instruction aborts */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ESR_ELx_FSC</span>             <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x3F</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ESR_ELx_FSC_TYPE</span>        <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x3C</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ESR_ELx_FSC_EXTABT</span>      <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ESR_ELx_FSC_SERROR</span>      <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ESR_ELx_FSC_ACCESS</span>      <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x08</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ESR_ELx_FSC_FAULT</span>       <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ESR_ELx_FSC_PERM</span>        <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x0C</span><span class="token punctuation">)</span></span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FSC_FAULT</span>       <span class="token expression">ESR_ELx_FSC_FAULT</span></span>\n<span class="token comment">// Access flag fault</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FSC_ACCESS</span>      <span class="token expression">ESR_ELx_FSC_ACCESS</span></span>\n<span class="token comment">// Permission fault</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FSC_PERM</span>        <span class="token expression">ESR_ELx_FSC_PERM</span></span>\n<span class="token comment">// Synchronous External abort, not on translation table walk or</span>\n<span class="token comment">// hardware update of translation table.</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FSC_SEA</span>         <span class="token expression">ESR_ELx_FSC_EXTABT</span></span>\n<span class="token comment">// The following 4 macro are translation table walk</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FSC_SEA_TTW0</span>    <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x14</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FSC_SEA_TTW1</span>    <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x15</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FSC_SEA_TTW2</span>    <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x16</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FSC_SEA_TTW3</span>    <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span></span></span>\n<span class="token comment">// The following 5 are ecc error</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FSC_SECC</span>        <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FSC_SECC_TTW0</span>   <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x1c</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FSC_SECC_TTW1</span>   <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x1d</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FSC_SECC_TTW2</span>   <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x1e</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FSC_SECC_TTW3</span>   <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x1f</span><span class="token punctuation">)</span></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>        <span class="token comment">/* Synchronous External Abort? */</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kvm_vcpu_dabt_isextabt</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">/*\n                 * For RAS the host kernel may handle this abort.\n                 * There is no need to pass the error into the guest.\n                 */</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">handle_guest_sea</span><span class="token punctuation">(</span>fault_ipa<span class="token punctuation">,</span> <span class="token function">kvm_vcpu_get_hsr</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>is_iabt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token function">kvm_inject_vabt</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Then we only handle translation faule (<code>FSC_FAULT</code>), permission fault (<code>FSC_PERM</code>) and access flag fault (<code>FSC_ACCESS</code>).</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>        <span class="token function">trace_kvm_guest_fault</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">vcpu_pc</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">kvm_vcpu_get_hsr</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                              <span class="token function">kvm_vcpu_get_hfar</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">,</span> fault_ipa<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/* Check the stage-2 fault is trans. fault or write fault */</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>fault_status <span class="token operator">!=</span> FSC_FAULT <span class="token operator">&amp;&amp;</span> fault_status <span class="token operator">!=</span> FSC_PERM <span class="token operator">&amp;&amp;</span>\n            fault_status <span class="token operator">!=</span> FSC_ACCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">kvm_err</span><span class="token punctuation">(</span><span class="token string">&quot;Unsupported FSC: EC=%#x xFSC=%#lx ESR_EL2=%#lx\\n&quot;</span><span class="token punctuation">,</span>\n                        <span class="token function">kvm_vcpu_trap_get_class</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token function">kvm_vcpu_trap_get_fault</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token function">kvm_vcpu_get_hsr</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        idx <span class="token operator">=</span> <span class="token function">srcu_read_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vcpu<span class="token operator">-&gt;</span>kvm<span class="token operator">-&gt;</span>srcu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        gfn <span class="token operator">=</span> fault_ipa <span class="token operator">&gt;&gt;</span> PAGE_SHIFT<span class="token punctuation">;</span>\n        memslot <span class="token operator">=</span> <span class="token function">gfn_to_memslot</span><span class="token punctuation">(</span>vcpu<span class="token operator">-&gt;</span>kvm<span class="token punctuation">,</span> gfn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        hva <span class="token operator">=</span> <span class="token function">gfn_to_hva_memslot_prot</span><span class="token punctuation">(</span>memslot<span class="token punctuation">,</span> gfn<span class="token punctuation">,</span> <span class="token operator">&amp;</span>writable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        write_fault <span class="token operator">=</span> <span class="token function">kvm_is_write_fault</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ol start="2"><li>MMIO</li></ol><p>Error <code>hva</code> means the address of <code>gpa</code> is MMIO address.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kvm_is_error_hva</span><span class="token punctuation">(</span>hva<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>write_fault <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>writable<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>is_iabt<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token comment">/* Prefetch Abort on I/O address */</span>\n                        <span class="token function">kvm_inject_pabt</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> <span class="token function">kvm_vcpu_get_hfar</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n                        <span class="token keyword">goto</span> out_unlock<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token comment">/*\n                 * Check for a cache maintenance operation. Since we\n                 * ended-up here, we know it is outside of any memory\n                 * slot. But we can&#39;t find out if that is for a device,\n                 * or if the guest is just being stupid. The only thing\n                 * we know for sure is that this range cannot be cached.\n                 *\n                 * So let&#39;s assume that the guest is just being\n                 * cautious, and skip the instruction.\n                 */</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kvm_vcpu_dabt_is_cm</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token function">kvm_skip_instr</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> <span class="token function">kvm_vcpu_trap_il_is32bit</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n                        <span class="token keyword">goto</span> out_unlock<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token comment">/*\n                 * The IPA is reported as [MAX:12], so we need to\n                 * complement it with the bottom 12 bits from the\n                 * faulting VA. This is always 12 bits, irrespective\n                 * of the page size.\n                 */</span>\n                fault_ipa <span class="token operator">|=</span> <span class="token function">kvm_vcpu_get_hfar</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                ret <span class="token operator">=</span> <span class="token function">io_mem_abort</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> run<span class="token punctuation">,</span> fault_ipa<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">goto</span> out_unlock<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p><code>io_mem_abort</code> dispatches MMIO access.</p><p>If the kernel can handle it (for example, guest accesses GIC chip), directly return 1 so we won&#39;t go back to userspace.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">io_mem_abort</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">kvm_run</span> <span class="token operator">*</span>run<span class="token punctuation">,</span>\n                 <span class="token class-name">phys_addr_t</span> fault_ipa<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> data<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rt<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> ret<span class="token punctuation">;</span>\n        bool is_write<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> len<span class="token punctuation">;</span>\n        u8 data_buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * Prepare MMIO operation. First decode the syndrome data we get\n         * from the CPU. Then try if some in-kernel emulation feels\n         * responsible, otherwise let user space do its magic.\n         */</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kvm_vcpu_dabt_isvalid</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                ret <span class="token operator">=</span> <span class="token function">decode_hsr</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> <span class="token operator">&amp;</span>is_write<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>\n                        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token function">kvm_err</span><span class="token punctuation">(</span><span class="token string">&quot;load/store instruction decoding not implemented\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token operator">-</span>ENOSYS<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        rt <span class="token operator">=</span> vcpu<span class="token operator">-&gt;</span>arch<span class="token punctuation">.</span>mmio_decode<span class="token punctuation">.</span>rt<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>is_write<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                data <span class="token operator">=</span> <span class="token function">vcpu_data_guest_to_host</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> <span class="token function">vcpu_get_reg</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> rt<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                                               len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token function">trace_kvm_mmio</span><span class="token punctuation">(</span>KVM_TRACE_MMIO_WRITE<span class="token punctuation">,</span> len<span class="token punctuation">,</span> fault_ipa<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">kvm_mmio_write_buf</span><span class="token punctuation">(</span>data_buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                ret <span class="token operator">=</span> <span class="token function">kvm_io_bus_write</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> KVM_MMIO_BUS<span class="token punctuation">,</span> fault_ipa<span class="token punctuation">,</span> len<span class="token punctuation">,</span>\n                                       data_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token function">trace_kvm_mmio</span><span class="token punctuation">(</span>KVM_TRACE_MMIO_READ_UNSATISFIED<span class="token punctuation">,</span> len<span class="token punctuation">,</span>\n                               fault_ipa<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                ret <span class="token operator">=</span> <span class="token function">kvm_io_bus_read</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> KVM_MMIO_BUS<span class="token punctuation">,</span> fault_ipa<span class="token punctuation">,</span> len<span class="token punctuation">,</span>\n                                      data_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">/* Now prepare kvm_run for the potential return to userland. */</span>\n        run<span class="token operator">-&gt;</span>mmio<span class="token punctuation">.</span>is_write      <span class="token operator">=</span> is_write<span class="token punctuation">;</span>\n        run<span class="token operator">-&gt;</span>mmio<span class="token punctuation">.</span>phys_addr     <span class="token operator">=</span> fault_ipa<span class="token punctuation">;</span>\n        run<span class="token operator">-&gt;</span>mmio<span class="token punctuation">.</span>len           <span class="token operator">=</span> len<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">/* We handled the access successfully in the kernel. */</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_write<span class="token punctuation">)</span>\n                        <span class="token function">memcpy</span><span class="token punctuation">(</span>run<span class="token operator">-&gt;</span>mmio<span class="token punctuation">.</span>data<span class="token punctuation">,</span> data_buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                vcpu<span class="token operator">-&gt;</span>stat<span class="token punctuation">.</span>mmio_exit_kernel<span class="token operator">++</span><span class="token punctuation">;</span>\n                <span class="token function">kvm_handle_mmio_return</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> run<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>is_write<span class="token punctuation">)</span>\n                <span class="token function">memcpy</span><span class="token punctuation">(</span>run<span class="token operator">-&gt;</span>mmio<span class="token punctuation">.</span>data<span class="token punctuation">,</span> data_buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        vcpu<span class="token operator">-&gt;</span>stat<span class="token punctuation">.</span>mmio_exit_user<span class="token operator">++</span><span class="token punctuation">;</span>\n        run<span class="token operator">-&gt;</span>exit_reason        <span class="token operator">=</span> KVM_EXIT_MMIO<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><ol start="3"><li>Access flag abort</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>        <span class="token comment">/* Userspace should not be able to register out-of-bounds IPAs */</span>\n        <span class="token function">VM_BUG_ON</span><span class="token punctuation">(</span>fault_ipa <span class="token operator">&gt;=</span> <span class="token function">kvm_phys_size</span><span class="token punctuation">(</span>vcpu<span class="token operator">-&gt;</span>kvm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>fault_status <span class="token operator">==</span> FSC_ACCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">handle_access_fault</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> fault_ipa<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n                <span class="token keyword">goto</span> out_unlock<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/*\n * Resolve the access fault by making the page young again.\n * Note that because the faulting entry is guaranteed not to be\n * cached in the TLB, we don&#39;t need to invalidate anything.\n * Only the HW Access Flag updates are supported for Stage 2 (no DBM),\n * so there is no need for atomic (pte|pmd)_mkyoung operations.\n */</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handle_access_fault</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">,</span> <span class="token class-name">phys_addr_t</span> fault_ipa<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token class-name">pud_t</span> <span class="token operator">*</span>pud<span class="token punctuation">;</span>\n        <span class="token class-name">pmd_t</span> <span class="token operator">*</span>pmd<span class="token punctuation">;</span>\n        <span class="token class-name">pte_t</span> <span class="token operator">*</span>pte<span class="token punctuation">;</span>\n        <span class="token class-name">kvm_pfn_t</span> pfn<span class="token punctuation">;</span>\n        bool pfn_valid <span class="token operator">=</span> false<span class="token punctuation">;</span>\n\n        <span class="token function">trace_kvm_access_fault</span><span class="token punctuation">(</span>fault_ipa<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vcpu<span class="token operator">-&gt;</span>kvm<span class="token operator">-&gt;</span>mmu_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">stage2_get_leaf_entry</span><span class="token punctuation">(</span>vcpu<span class="token operator">-&gt;</span>kvm<span class="token punctuation">,</span> fault_ipa<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pud<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pmd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pte<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">goto</span> out<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>pud<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">/* HugeTLB */</span>\n                <span class="token operator">*</span>pud <span class="token operator">=</span> <span class="token function">kvm_s2pud_mkyoung</span><span class="token punctuation">(</span><span class="token operator">*</span>pud<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                pfn <span class="token operator">=</span> <span class="token function">kvm_pud_pfn</span><span class="token punctuation">(</span><span class="token operator">*</span>pud<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                pfn_valid <span class="token operator">=</span> true<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">/* THP, HugeTLB */</span>\n                <span class="token operator">*</span>pmd <span class="token operator">=</span> <span class="token function">pmd_mkyoung</span><span class="token punctuation">(</span><span class="token operator">*</span>pmd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                pfn <span class="token operator">=</span> <span class="token function">pmd_pfn</span><span class="token punctuation">(</span><span class="token operator">*</span>pmd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                pfn_valid <span class="token operator">=</span> true<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token function">pte_mkyoung</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">/* Just a page... */</span>\n                pfn <span class="token operator">=</span> <span class="token function">pte_pfn</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                pfn_valid <span class="token operator">=</span> true<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\nout<span class="token operator">:</span>\n        <span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vcpu<span class="token operator">-&gt;</span>kvm<span class="token operator">-&gt;</span>mmu_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>pfn_valid<span class="token punctuation">)</span>\n                <span class="token function">kvm_set_pfn_accessed</span><span class="token punctuation">(</span>pfn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><ol start="4"><li>Translation and Permission abort</li></ol><p>Back to <code>kvm_handle_guest_abort</code>, <code>user_mem_abort</code> handles permission abort and translation fault.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>        ret <span class="token operator">=</span> <span class="token function">user_mem_abort</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> fault_ipa<span class="token punctuation">,</span> memslot<span class="token punctuation">,</span> hva<span class="token punctuation">,</span> fault_status<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>ARM Memory Virtualization supports:</p><ul><li><code>PUD_SIZE</code> huge page</li><li><code>PMD_SIZE</code> huge page</li><li>4K page</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">user_mem_abort</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">,</span> <span class="token class-name">phys_addr_t</span> fault_ipa<span class="token punctuation">,</span>\n                          <span class="token keyword">struct</span> <span class="token class-name">kvm_memory_slot</span> <span class="token operator">*</span>memslot<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> hva<span class="token punctuation">,</span>\n                          <span class="token keyword">unsigned</span> <span class="token keyword">long</span> fault_status<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">int</span> ret<span class="token punctuation">;</span>\n        bool write_fault<span class="token punctuation">,</span> writable<span class="token punctuation">,</span> force_pte <span class="token operator">=</span> false<span class="token punctuation">;</span>\n        bool exec_fault<span class="token punctuation">,</span> needs_exec<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> mmu_seq<span class="token punctuation">;</span>\n        <span class="token class-name">gfn_t</span> gfn <span class="token operator">=</span> fault_ipa <span class="token operator">&gt;&gt;</span> PAGE_SHIFT<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">kvm</span> <span class="token operator">*</span>kvm <span class="token operator">=</span> vcpu<span class="token operator">-&gt;</span>kvm<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">kvm_mmu_memory_cache</span> <span class="token operator">*</span>memcache <span class="token operator">=</span> <span class="token operator">&amp;</span>vcpu<span class="token operator">-&gt;</span>arch<span class="token punctuation">.</span>mmu_page_cache<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vma<span class="token punctuation">;</span>\n        <span class="token class-name">kvm_pfn_t</span> pfn<span class="token punctuation">;</span>\n        <span class="token class-name">pgprot_t</span> mem_type <span class="token operator">=</span> PAGE_S2<span class="token punctuation">;</span>\n        bool logging_active <span class="token operator">=</span> <span class="token function">memslot_is_logging</span><span class="token punctuation">(</span>memslot<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> vma_pagesize<span class="token punctuation">,</span> flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n        write_fault <span class="token operator">=</span> <span class="token function">kvm_is_write_fault</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        exec_fault <span class="token operator">=</span> <span class="token function">kvm_vcpu_trap_is_iabt</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">VM_BUG_ON</span><span class="token punctuation">(</span>write_fault <span class="token operator">&amp;&amp;</span> exec_fault<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>fault_status <span class="token operator">==</span> FSC_PERM <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>write_fault <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>exec_fault<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">kvm_err</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected L2 read permission error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">fault_supports_stage2_pmd_mappings</span><span class="token punctuation">(</span>memslot<span class="token punctuation">,</span> hva<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                force_pte <span class="token operator">=</span> true<span class="token punctuation">;</span>\n\n        <span class="token comment">// If dirty logging is enabled, we only support 4K page</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>logging_active<span class="token punctuation">)</span>\n                force_pte <span class="token operator">=</span> true<span class="token punctuation">;</span>\n\n        <span class="token comment">/* Let&#39;s check if we will get back a huge page backed by hugetlbfs */</span>\n        <span class="token function">down_read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>current<span class="token operator">-&gt;</span>mm<span class="token operator">-&gt;</span>mmap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        vma <span class="token operator">=</span> <span class="token function">find_vma_intersection</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>mm<span class="token punctuation">,</span> hva<span class="token punctuation">,</span> hva <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>vma<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">kvm_err</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to find VMA for hva 0x%lx\\n&quot;</span><span class="token punctuation">,</span> hva<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">up_read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>current<span class="token operator">-&gt;</span>mm<span class="token operator">-&gt;</span>mmap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// return the size of the pages allocated when backing a VMA</span>\n        vma_pagesize <span class="token operator">=</span> <span class="token function">vma_kernel_pagesize</span><span class="token punctuation">(</span>vma<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// align the gfn to the size of huge page</span>\n        <span class="token comment">/*\n         * The stage2 has a minimum of 2 level table (For arm64 see\n         * kvm_arm_setup_stage2()). Hence, we are guaranteed that we can\n         * use PMD_SIZE huge mappings (even when the PMD is folded into PGD).\n         * As for PUD huge maps, we must make sure that we have at least\n         * 3 levels, i.e, PMD is not folded.\n         */</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>vma_pagesize <span class="token operator">==</span> PMD_SIZE <span class="token operator">||</span>\n             <span class="token punctuation">(</span>vma_pagesize <span class="token operator">==</span> PUD_SIZE <span class="token operator">&amp;&amp;</span> <span class="token function">kvm_stage2_has_pmd</span><span class="token punctuation">(</span>kvm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n            <span class="token operator">!</span>force_pte<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                gfn <span class="token operator">=</span> <span class="token punctuation">(</span>fault_ipa <span class="token operator">&amp;</span> <span class="token function">huge_page_mask</span><span class="token punctuation">(</span><span class="token function">hstate_vma</span><span class="token punctuation">(</span>vma<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> PAGE_SHIFT<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">up_read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>current<span class="token operator">-&gt;</span>mm<span class="token operator">-&gt;</span>mmap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/* We need minimum second+third level pages */</span>\n        <span class="token comment">// prefetch some pages so building page table won&#39;t fail</span>\n        ret <span class="token operator">=</span> <span class="token function">mmu_topup_memory_cache</span><span class="token punctuation">(</span>memcache<span class="token punctuation">,</span> <span class="token function">kvm_mmu_cache_min_pages</span><span class="token punctuation">(</span>kvm<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                                     KVM_NR_MEM_OBJS<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>\n                <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n\n        mmu_seq <span class="token operator">=</span> vcpu<span class="token operator">-&gt;</span>kvm<span class="token operator">-&gt;</span>mmu_notifier_seq<span class="token punctuation">;</span>\n        <span class="token comment">/*\n         * Ensure the read of mmu_notifier_seq happens before we call\n         * gfn_to_pfn_prot (which calls get_user_pages), so that we don&#39;t risk\n         * the page we just got a reference to gets unmapped before we have a\n         * chance to grab the mmu_lock, which ensure that if the page gets\n         * unmapped afterwards, the call to kvm_unmap_hva will take it away\n         * from us again properly. This smp_rmb() interacts with the smp_wmb()\n         * in kvm_mmu_notifier_invalidate_&lt;page|range_end&gt;.\n         */</span>\n        <span class="token function">smp_rmb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        pfn <span class="token operator">=</span> <span class="token function">gfn_to_pfn_prot</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> gfn<span class="token punctuation">,</span> write_fault<span class="token punctuation">,</span> <span class="token operator">&amp;</span>writable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>pfn <span class="token operator">==</span> KVM_PFN_ERR_HWPOISON<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">kvm_send_hwpoison_signal</span><span class="token punctuation">(</span>hva<span class="token punctuation">,</span> vma<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_error_noslot_pfn</span><span class="token punctuation">(</span>pfn<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kvm_is_device_pfn</span><span class="token punctuation">(</span>pfn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                mem_type <span class="token operator">=</span> PAGE_S2_DEVICE<span class="token punctuation">;</span>\n                flags <span class="token operator">|=</span> KVM_S2PTE_FLAG_IS_IOMAP<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>logging_active<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">/*\n                 * Faults on pages in a memslot with logging enabled\n                 * should not be mapped with huge pages (it introduces churn\n                 * and performance degradation), so force a pte mapping.\n                 */</span>\n                flags <span class="token operator">|=</span> KVM_S2_FLAG_LOGGING_ACTIVE<span class="token punctuation">;</span>\n\n                <span class="token comment">/*\n                 * Only actually map the page as writable if this was a write\n                 * fault.\n                 */</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>write_fault<span class="token punctuation">)</span>\n                        writable <span class="token operator">=</span> false<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token function">spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kvm<span class="token operator">-&gt;</span>mmu_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mmu_notifier_retry</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> mmu_seq<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">goto</span> out_unlock<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>vma_pagesize <span class="token operator">==</span> PAGE_SIZE <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>force_pte<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">/*\n                 * Only PMD_SIZE transparent hugepages(THP) are\n                 * currently supported. This code will need to be\n                 * updated to support other THP sizes.\n                 */</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">transparent_hugepage_adjust</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pfn<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fault_ipa<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                        vma_pagesize <span class="token operator">=</span> PMD_SIZE<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>writable<span class="token punctuation">)</span>\n                <span class="token function">kvm_set_pfn_dirty</span><span class="token punctuation">(</span>pfn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>fault_status <span class="token operator">!=</span> FSC_PERM<span class="token punctuation">)</span>\n                <span class="token function">clean_dcache_guest_page</span><span class="token punctuation">(</span>pfn<span class="token punctuation">,</span> vma_pagesize<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>exec_fault<span class="token punctuation">)</span>\n                <span class="token function">invalidate_icache_guest_page</span><span class="token punctuation">(</span>pfn<span class="token punctuation">,</span> vma_pagesize<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * If we took an execution fault we have made the\n         * icache/dcache coherent above and should now let the s2\n         * mapping be executable.\n         *\n         * Write faults (!exec_fault &amp;&amp; FSC_PERM) are orthogonal to\n         * execute permissions, and we preserve whatever we have.\n         */</span>\n        needs_exec <span class="token operator">=</span> exec_fault <span class="token operator">||</span>\n                <span class="token punctuation">(</span>fault_status <span class="token operator">==</span> FSC_PERM <span class="token operator">&amp;&amp;</span> <span class="token function">stage2_is_exec</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> fault_ipa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// setup stage-2 page table</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>vma_pagesize <span class="token operator">==</span> PUD_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">pud_t</span> new_pud <span class="token operator">=</span> <span class="token function">kvm_pfn_pud</span><span class="token punctuation">(</span>pfn<span class="token punctuation">,</span> mem_type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                new_pud <span class="token operator">=</span> <span class="token function">kvm_pud_mkhuge</span><span class="token punctuation">(</span>new_pud<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>writable<span class="token punctuation">)</span>\n                        new_pud <span class="token operator">=</span> <span class="token function">kvm_s2pud_mkwrite</span><span class="token punctuation">(</span>new_pud<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>needs_exec<span class="token punctuation">)</span>\n                        new_pud <span class="token operator">=</span> <span class="token function">kvm_s2pud_mkexec</span><span class="token punctuation">(</span>new_pud<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                ret <span class="token operator">=</span> <span class="token function">stage2_set_pud_huge</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> memcache<span class="token punctuation">,</span> fault_ipa<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_pud<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>vma_pagesize <span class="token operator">==</span> PMD_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">pmd_t</span> new_pmd <span class="token operator">=</span> <span class="token function">kvm_pfn_pmd</span><span class="token punctuation">(</span>pfn<span class="token punctuation">,</span> mem_type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                new_pmd <span class="token operator">=</span> <span class="token function">kvm_pmd_mkhuge</span><span class="token punctuation">(</span>new_pmd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>writable<span class="token punctuation">)</span>\n                        new_pmd <span class="token operator">=</span> <span class="token function">kvm_s2pmd_mkwrite</span><span class="token punctuation">(</span>new_pmd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>needs_exec<span class="token punctuation">)</span>\n                        new_pmd <span class="token operator">=</span> <span class="token function">kvm_s2pmd_mkexec</span><span class="token punctuation">(</span>new_pmd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                ret <span class="token operator">=</span> <span class="token function">stage2_set_pmd_huge</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> memcache<span class="token punctuation">,</span> fault_ipa<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_pmd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token class-name">pte_t</span> new_pte <span class="token operator">=</span> <span class="token function">kvm_pfn_pte</span><span class="token punctuation">(</span>pfn<span class="token punctuation">,</span> mem_type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>writable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        new_pte <span class="token operator">=</span> <span class="token function">kvm_s2pte_mkwrite</span><span class="token punctuation">(</span>new_pte<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token function">mark_page_dirty</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> gfn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>needs_exec<span class="token punctuation">)</span>\n                        new_pte <span class="token operator">=</span> <span class="token function">kvm_s2pte_mkexec</span><span class="token punctuation">(</span>new_pte<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                ret <span class="token operator">=</span> <span class="token function">stage2_set_pte</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> memcache<span class="token punctuation">,</span> fault_ipa<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_pte<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\nout_unlock<span class="token operator">:</span>\n        <span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kvm<span class="token operator">-&gt;</span>mmu_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">kvm_set_pfn_accessed</span><span class="token punctuation">(</span>pfn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">kvm_release_pfn_clean</span><span class="token punctuation">(</span>pfn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br></div></div><p>Finally, <code>kvm_handle_guest_abort</code> finished.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n                ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\nout_unlock<span class="token operator">:</span>\n        <span class="token function">srcu_read_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vcpu<span class="token operator">-&gt;</span>kvm<span class="token operator">-&gt;</span>srcu<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2><blockquote><p>armv8 specification. D5</p></blockquote>',33),t={render:function(n,s){return p}}}}]);