"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[8664],{3075:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-32678d6e",path:"/kernel/trace/kprobes.html",title:"kprobes",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"struct kprobe",slug:"struct-kprobe",children:[]},{level:2,title:"register_kprobe",slug:"register-kprobe",children:[]},{level:2,title:"setup kprobe",slug:"setup-kprobe",children:[]},{level:2,title:"handler",slug:"handler",children:[]}],filePathRelative:"kernel/trace/kprobes.md",git:{updatedTime:1624615626e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:1}]}}},2374:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="kprobes" tabindex="-1"><a class="header-anchor" href="#kprobes" aria-hidden="true">#</a> kprobes</h1><p><code>kprobes</code>可以在内核中插入断点.</p><p><code>register_kprobe</code>, <code>unregister_kprobe</code>接口使得可以在内核中插入, 删除断点.</p><h2 id="struct-kprobe" tabindex="-1"><a class="header-anchor" href="#struct-kprobe" aria-hidden="true">#</a> struct kprobe</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">kprobe</span> <span class="token punctuation">{</span>\n        <span class="token keyword">struct</span> <span class="token class-name">hlist_node</span> hlist<span class="token punctuation">;</span>\n\n        <span class="token comment">/* list of kprobes for multi-handler support */</span>\n        <span class="token keyword">struct</span> <span class="token class-name">list_head</span> list<span class="token punctuation">;</span>\n\n        <span class="token comment">/*count the number of times this probe was temporarily disarmed */</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> nmissed<span class="token punctuation">;</span>\n\n        <span class="token comment">/* location of the probe point */</span>\n        <span class="token class-name">kprobe_opcode_t</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span>\n\n        <span class="token comment">/* Allow user to indicate symbol name of the probe point */</span>\n        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>symbol_name<span class="token punctuation">;</span>\n\n        <span class="token comment">/* Offset into the symbol */</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> offset<span class="token punctuation">;</span>\n\n        <span class="token comment">/* Called before addr is executed. */</span>\n        <span class="token class-name">kprobe_pre_handler_t</span> pre_handler<span class="token punctuation">;</span>\n\n        <span class="token comment">/* Called after addr is executed, unless... */</span>\n        <span class="token class-name">kprobe_post_handler_t</span> post_handler<span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * ... called if executing addr causes a fault (eg. page fault).\n         * Return 1 if it handled fault, otherwise kernel will see it.\n         */</span>\n        <span class="token class-name">kprobe_fault_handler_t</span> fault_handler<span class="token punctuation">;</span>\n\n        <span class="token comment">/* Saved opcode (which has been replaced with breakpoint) */</span>\n        <span class="token class-name">kprobe_opcode_t</span> opcode<span class="token punctuation">;</span>\n\n        <span class="token comment">/* copy of the original instruction */</span>\n        <span class="token keyword">struct</span> <span class="token class-name">arch_specific_insn</span> ainsn<span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * Indicates various status flags.\n         * Protected by kprobe_mutex after this kprobe is registered.\n         */</span>\n        u32 flags<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>例如</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">char</span> symbol<span class="token punctuation">[</span>MAX_SYMBOL_LEN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;_do_fork&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">kprobe</span> kp <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t<span class="token punctuation">.</span>symbol_name <span class="token operator">=</span> symbol<span class="token punctuation">,</span>\n\t<span class="token punctuation">.</span>pre_handler <span class="token operator">=</span> handler_pre<span class="token punctuation">,</span>\n\t<span class="token punctuation">.</span>post_handler <span class="token operator">=</span> handler_post<span class="token punctuation">,</span>\n\t<span class="token punctuation">.</span>fault_handler <span class="token operator">=</span> handler_fault<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">register_kprobe</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>注意</p><ul><li><code>addr</code>和<code>symbol_name</code>只能设置一个</li></ul><h2 id="register-kprobe" tabindex="-1"><a class="header-anchor" href="#register-kprobe" aria-hidden="true">#</a> register_kprobe</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">register_kprobe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kprobe</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">int</span> ret<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">kprobe</span> <span class="token operator">*</span>old_p<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">module</span> <span class="token operator">*</span>probed_mod<span class="token punctuation">;</span>\n        <span class="token class-name">kprobe_opcode_t</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span>\n\n        <span class="token comment">/* Adjust probe address from symbol */</span>\n\t<span class="token comment">// 如果设置的是symbol name, 转换成addr然后加上offset</span>\n        addr <span class="token operator">=</span> <span class="token function">kprobe_addr</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ERR</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span> <span class="token function">PTR_ERR</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        p<span class="token operator">-&gt;</span>addr <span class="token operator">=</span> addr<span class="token punctuation">;</span>\n\n\t<span class="token comment">// 根据addr看是否有相同的probe</span>\n        ret <span class="token operator">=</span> <span class="token function">check_kprobe_rereg</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>\n                <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n\n        <span class="token comment">/* User can pass only KPROBE_FLAG_DISABLED to register_kprobe */</span>\n        p<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;=</span> KPROBE_FLAG_DISABLED<span class="token punctuation">;</span>\n        p<span class="token operator">-&gt;</span>nmissed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">// probe只能插在kernel的代码段, 且不在blacklist里, 且不是reserved, 且</span>\n\t<span class="token comment">// 不在bug table中. 若断点在module中, probed_mod记录module</span>\n        ret <span class="token operator">=</span> <span class="token function">check_kprobe_address_safe</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>probed_mod<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>\n                <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n\n        <span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kprobe_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        old_p <span class="token operator">=</span> <span class="token function">get_kprobe</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>old_p<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">/* Since this may unoptimize old_p, locking text_mutex. */</span>\n                ret <span class="token operator">=</span> <span class="token function">register_aggr_kprobe</span><span class="token punctuation">(</span>old_p<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">goto</span> out<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token function">cpus_read_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">/* Prevent text modification */</span>\n        <span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>text_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ret <span class="token operator">=</span> <span class="token function">prepare_kprobe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>text_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">cpus_read_unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>\n                <span class="token keyword">goto</span> out<span class="token punctuation">;</span>\n\n        <span class="token function">INIT_HLIST_NODE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>hlist<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">hlist_add_head_rcu</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>hlist<span class="token punctuation">,</span>\n                       <span class="token operator">&amp;</span>kprobe_table<span class="token punctuation">[</span><span class="token function">hash_ptr</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>addr<span class="token punctuation">,</span> KPROBE_HASH_BITS<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>kprobes_all_disarmed <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">kprobe_disabled</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                ret <span class="token operator">=</span> <span class="token function">arm_kprobe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token function">hlist_del_rcu</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>hlist<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token function">synchronize_rcu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">/* Try to optimize kprobe */</span>\n        <span class="token function">try_to_optimize_kprobe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\nout<span class="token operator">:</span>\n        <span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kprobe_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>probed_mod<span class="token punctuation">)</span>\n                <span class="token function">module_put</span><span class="token punctuation">(</span>probed_mod<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br></div></div><h2 id="setup-kprobe" tabindex="-1"><a class="header-anchor" href="#setup-kprobe" aria-hidden="true">#</a> setup kprobe</h2><p>设置断点的逻辑在</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__arm_kprobe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kprobe</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">struct</span> <span class="token class-name">kprobe</span> <span class="token operator">*</span>_p<span class="token punctuation">;</span>\n\n        <span class="token comment">/* Check collision with other optimized kprobes */</span>\n        _p <span class="token operator">=</span> <span class="token function">get_optimized_kprobe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>p<span class="token operator">-&gt;</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>_p<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token comment">/* Fallback to unoptimized kprobe */</span>\n                <span class="token function">unoptimize_kprobe</span><span class="token punctuation">(</span>_p<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">arch_arm_kprobe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">optimize_kprobe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/* Try to optimize (add kprobe to a list) */</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>取决于不通的体系结构, <code>arch_arm_kprobe</code>有不同的实现. 例如<code>x86</code>使用的指令是<code>int3</code></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">arch_arm_kprobe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kprobe</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        u8 int3 <span class="token operator">=</span> INT3_INSN_OPCODE<span class="token punctuation">;</span>\n\n        <span class="token function">text_poke</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>int3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">text_poke_sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">perf_event_text_poke</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>opcode<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>int3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="handler" tabindex="-1"><a class="header-anchor" href="#handler" aria-hidden="true">#</a> handler</h2><p>以<code>x86</code>为例, 如果发生了<code>int3</code>中断</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> bool <span class="token function">do_int3</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pt_regs</span> <span class="token operator">*</span>regs<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">int</span> res<span class="token punctuation">;</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_KGDB_LOW_LEVEL_TRAP</span></span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kgdb_ll_trap</span><span class="token punctuation">(</span>DIE_INT3<span class="token punctuation">,</span> <span class="token string">&quot;int3&quot;</span><span class="token punctuation">,</span> regs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> X86_TRAP_BP<span class="token punctuation">,</span>\n                         SIGTRAP<span class="token punctuation">)</span> <span class="token operator">==</span> NOTIFY_STOP<span class="token punctuation">)</span>\n                <span class="token keyword">return</span> true<span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* CONFIG_KGDB_LOW_LEVEL_TRAP */</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_KPROBES</span></span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kprobe_int3_handler</span><span class="token punctuation">(</span>regs<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span> true<span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n        res <span class="token operator">=</span> <span class="token function">notify_die</span><span class="token punctuation">(</span>DIE_INT3<span class="token punctuation">,</span> <span class="token string">&quot;int3&quot;</span><span class="token punctuation">,</span> regs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> X86_TRAP_BP<span class="token punctuation">,</span> SIGTRAP<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> res <span class="token operator">==</span> NOTIFY_STOP<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>进入<code>kprobe_int3_handler</code>函数. 里面会根据addr看是否注册<code>kprobe</code>, 若有则执行 <code>kprobe</code>里的函数.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/*\n * Interrupts are disabled on entry as trap3 is an interrupt gate and they\n * remain disabled throughout this function.\n */</span>\n<span class="token keyword">int</span> <span class="token function">kprobe_int3_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pt_regs</span> <span class="token operator">*</span>regs<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token class-name">kprobe_opcode_t</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">kprobe</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">kprobe_ctlblk</span> <span class="token operator">*</span>kcb<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">user_mode</span><span class="token punctuation">(</span>regs<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n        addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">kprobe_opcode_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>regs<span class="token operator">-&gt;</span>ip <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">kprobe_opcode_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">/*\n         * We don&#39;t want to be preempted for the entire duration of kprobe\n         * processing. Since int3 and debug trap disables irqs and we clear\n         * IF while singlestepping, it must be no preemptible.\n         */</span>\n\n        kcb <span class="token operator">=</span> <span class="token function">get_kprobe_ctlblk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        p <span class="token operator">=</span> <span class="token function">get_kprobe</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// ...</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>addr <span class="token operator">!=</span> INT3_INSN_OPCODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">/*\n                 * The breakpoint instruction was removed right\n                 * after we hit it.  Another cpu has removed\n                 * either a probepoint or a debugger breakpoint\n                 * at this address.  In either case, no further\n                 * handling of this interrupt is appropriate.\n                 * Back up over the (now missing) int3 and run\n                 * the original instruction.\n                 */</span>\n                regs<span class="token operator">-&gt;</span>ip <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>addr<span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token comment">/* else: not a kprobe fault; let the kernel handle it */</span>\n\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div>',21),e={render:function(n,s){return p}}}}]);