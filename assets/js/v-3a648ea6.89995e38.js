"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[6534],{8143:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3a648ea6",path:"/kernel/power/psci.html",title:"PSCI",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"select operations for CPU",slug:"select-operations-for-cpu",children:[]},{level:2,title:"PSCI interface",slug:"psci-interface",children:[]},{level:2,title:"Setup PSCI",slug:"setup-psci",children:[{level:3,title:"setup conduit",slug:"setup-conduit",children:[]},{level:3,title:"psci_probe",slug:"psci-probe",children:[]},{level:3,title:"setup functions",slug:"setup-functions",children:[]},{level:3,title:"detect CPU running trusted OS",slug:"detect-cpu-running-trusted-os",children:[]}]},{level:2,title:"boot_secondary",slug:"boot-secondary",children:[]},{level:2,title:"Virtualization",slug:"virtualization",children:[]}],filePathRelative:"kernel/power/psci.md",git:{updatedTime:1625218046e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:1}]}}},6196:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="psci" tabindex="-1"><a class="header-anchor" href="#psci" aria-hidden="true">#</a> PSCI</h1><p>Power State Coordination Interface (PSCI) has the following uses:</p><ul><li>Provides a generic interface that supervisory software can use to manage power in the following situations: <ul><li>core idle management</li><li>dynamic addition of cores to and removal of cores from the sysytem, often referred to as hotplug</li><li>secondary core boot</li><li>moving trusted OS context from one core to another</li><li>system shutdown and reset</li></ul></li><li>Provides an interface that supervisory software can use in conjunction with Firmware Table (FDT and ACPI) descriptions to support the generalization of power management code</li></ul><h2 id="select-operations-for-cpu" tabindex="-1"><a class="header-anchor" href="#select-operations-for-cpu" aria-hidden="true">#</a> select operations for CPU</h2><div class="language-dts ext-dts line-numbers-mode"><pre class="language-dts"><code>// ./arch/arm64/boot/dts/arm/foundation-v8-psci.dtsi\n/ {\n        psci {\n                compatible = &quot;arm,psci-1.0&quot;;\n                method = &quot;smc&quot;;\n        };\n};\n\n&amp;cpu0 {\n        enable-method = &quot;psci&quot;;\n};\n\n&amp;cpu1 {\n        enable-method = &quot;psci&quot;;\n};\n\n&amp;cpu2 {\n        enable-method = &quot;psci&quot;;\n};\n\n&amp;cpu3 {\n        enable-method = &quot;psci&quot;;\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * struct cpu_operations - Callback operations for hotplugging CPUs.\n *\n * @name:       Name of the property as appears in a devicetree cpu node&#39;s\n *              enable-method property. On systems booting with ACPI, @name\n *              identifies the struct cpu_operations entry corresponding to\n *              the boot protocol specified in the ACPI MADT table.\n * @cpu_init:   Reads any data necessary for a specific enable-method for a\n *              proposed logical id.\n * @cpu_prepare: Early one-time preparation step for a cpu. If there is a\n *              mechanism for doing so, tests whether it is possible to boot\n *              the given CPU.\n * @cpu_boot:   Boots a cpu into the kernel.\n * @cpu_postboot: Optionally, perform any post-boot cleanup or necessary\n *              synchronisation. Called from the cpu being booted.\n * @cpu_can_disable: Determines whether a CPU can be disabled based on\n *              mechanism-specific information.\n * @cpu_disable: Prepares a cpu to die. May fail for some mechanism-specific\n *              reason, which will cause the hot unplug to be aborted. Called\n *              from the cpu to be killed.\n * @cpu_die:    Makes a cpu leave the kernel. Must not fail. Called from the\n *              cpu being killed.\n * @cpu_kill:  Ensures a cpu has left the kernel. Called from another cpu.\n * @cpu_init_idle: Reads any data necessary to initialize CPU idle states for\n *                 a proposed logical id.\n * @cpu_suspend: Suspends a cpu and saves the required context. May fail owing\n *               to wrong parameters or error conditions. Called from the\n *               CPU being suspended. Must be called with IRQs disabled.\n */</span>\n<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cpu_operations</span> cpu_psci_ops <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">.</span>name           <span class="token operator">=</span> <span class="token string">&quot;psci&quot;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">.</span>cpu_init       <span class="token operator">=</span> cpu_psci_cpu_init<span class="token punctuation">,</span>\n        <span class="token punctuation">.</span>cpu_prepare    <span class="token operator">=</span> cpu_psci_cpu_prepare<span class="token punctuation">,</span>\n        <span class="token punctuation">.</span>cpu_boot       <span class="token operator">=</span> cpu_psci_cpu_boot<span class="token punctuation">,</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_HOTPLUG_CPU</span></span>\n        <span class="token punctuation">.</span>cpu_can_disable <span class="token operator">=</span> cpu_psci_cpu_can_disable<span class="token punctuation">,</span>\n        <span class="token punctuation">.</span>cpu_disable    <span class="token operator">=</span> cpu_psci_cpu_disable<span class="token punctuation">,</span>\n        <span class="token punctuation">.</span>cpu_die        <span class="token operator">=</span> cpu_psci_cpu_die<span class="token punctuation">,</span>\n        <span class="token punctuation">.</span>cpu_kill       <span class="token operator">=</span> cpu_psci_cpu_kill<span class="token punctuation">,</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="psci-interface" tabindex="-1"><a class="header-anchor" href="#psci-interface" aria-hidden="true">#</a> PSCI interface</h2><p>They are defined in <code>include/uapi/linux/psci.h</code>.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_0_2_FN_PSCI_VERSION</span>                <span class="token expression"><span class="token function">PSCI_0_2_FN</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_0_2_FN_CPU_SUSPEND</span>                 <span class="token expression"><span class="token function">PSCI_0_2_FN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_0_2_FN_CPU_OFF</span>                     <span class="token expression"><span class="token function">PSCI_0_2_FN</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_0_2_FN_CPU_ON</span>                      <span class="token expression"><span class="token function">PSCI_0_2_FN</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_0_2_FN_AFFINITY_INFO</span>               <span class="token expression"><span class="token function">PSCI_0_2_FN</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_0_2_FN_MIGRATE</span>                     <span class="token expression"><span class="token function">PSCI_0_2_FN</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_0_2_FN_MIGRATE_INFO_TYPE</span>           <span class="token expression"><span class="token function">PSCI_0_2_FN</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_0_2_FN_MIGRATE_INFO_UP_CPU</span>         <span class="token expression"><span class="token function">PSCI_0_2_FN</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_0_2_FN_SYSTEM_OFF</span>                  <span class="token expression"><span class="token function">PSCI_0_2_FN</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_0_2_FN_SYSTEM_RESET</span>                <span class="token expression"><span class="token function">PSCI_0_2_FN</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span></span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_0_2_FN64_CPU_SUSPEND</span>               <span class="token expression"><span class="token function">PSCI_0_2_FN64</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_0_2_FN64_CPU_ON</span>                    <span class="token expression"><span class="token function">PSCI_0_2_FN64</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_0_2_FN64_AFFINITY_INFO</span>             <span class="token expression"><span class="token function">PSCI_0_2_FN64</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_0_2_FN64_MIGRATE</span>                   <span class="token expression"><span class="token function">PSCI_0_2_FN64</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_0_2_FN64_MIGRATE_INFO_UP_CPU</span>       <span class="token expression"><span class="token function">PSCI_0_2_FN64</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span></span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_1_0_FN_PSCI_FEATURES</span>               <span class="token expression"><span class="token function">PSCI_0_2_FN</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_1_0_FN_SYSTEM_SUSPEND</span>              <span class="token expression"><span class="token function">PSCI_0_2_FN</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_1_0_FN_SET_SUSPEND_MODE</span>            <span class="token expression"><span class="token function">PSCI_0_2_FN</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_1_1_FN_SYSTEM_RESET2</span>               <span class="token expression"><span class="token function">PSCI_0_2_FN</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span></span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_1_0_FN64_SYSTEM_SUSPEND</span>            <span class="token expression"><span class="token function">PSCI_0_2_FN64</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PSCI_1_1_FN64_SYSTEM_RESET2</span>             <span class="token expression"><span class="token function">PSCI_0_2_FN64</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span></span></span>\n\n<span class="token comment">// ...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="setup-psci" tabindex="-1"><a class="header-anchor" href="#setup-psci" aria-hidden="true">#</a> Setup PSCI</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">of_device_id</span> psci_of_match<span class="token punctuation">[</span><span class="token punctuation">]</span> __initconst <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">{</span> <span class="token punctuation">.</span>compatible <span class="token operator">=</span> <span class="token string">&quot;arm,psci&quot;</span><span class="token punctuation">,</span>     <span class="token punctuation">.</span>data <span class="token operator">=</span> psci_0_1_init<span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token punctuation">.</span>compatible <span class="token operator">=</span> <span class="token string">&quot;arm,psci-0.2&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>data <span class="token operator">=</span> psci_0_2_init<span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token punctuation">.</span>compatible <span class="token operator">=</span> <span class="token string">&quot;arm,psci-1.0&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>data <span class="token operator">=</span> psci_1_0_init<span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>In this section, we only analyze version 0.2 (<code>psci_0_2_init</code>)</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/*\n * PSCI init function for PSCI versions &gt;=0.2\n *\n * Probe based on PSCI PSCI_VERSION function\n */</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">psci_0_2_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device_node</span> <span class="token operator">*</span>np<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">int</span> err<span class="token punctuation">;</span>\n\n        err <span class="token operator">=</span> <span class="token function">get_set_conduit_method</span><span class="token punctuation">(</span>np<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n                <span class="token keyword">return</span> err<span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * Starting with v0.2, the PSCI specification introduced a call\n         * (PSCI_VERSION) that allows probing the firmware version, so\n         * that PSCI function IDs and version specific initialization\n         * can be carried out according to the specific version reported\n         * by firmware\n         */</span>\n        <span class="token keyword">return</span> <span class="token function">psci_probe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="setup-conduit" tabindex="-1"><a class="header-anchor" href="#setup-conduit" aria-hidden="true">#</a> setup conduit</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">get_set_conduit_method</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device_node</span> <span class="token operator">*</span>np<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method<span class="token punctuation">;</span>\n\n        <span class="token function">pr_info</span><span class="token punctuation">(</span><span class="token string">&quot;probing for conduit method from DT.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">of_property_read_string</span><span class="token punctuation">(</span>np<span class="token punctuation">,</span> <span class="token string">&quot;method&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">pr_warn</span><span class="token punctuation">(</span><span class="token string">&quot;missing \\&quot;method\\&quot; property\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token operator">-</span>ENXIO<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;hvc&quot;</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">set_conduit</span><span class="token punctuation">(</span>SMCCC_CONDUIT_HVC<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;smc&quot;</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">set_conduit</span><span class="token punctuation">(</span>SMCCC_CONDUIT_SMC<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token function">pr_warn</span><span class="token punctuation">(</span><span class="token string">&quot;invalid \\&quot;method\\&quot; property: %s\\n&quot;</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">set_conduit</span><span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token class-name">arm_smccc_conduit</span> conduit<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">switch</span> <span class="token punctuation">(</span>conduit<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> SMCCC_CONDUIT_HVC<span class="token operator">:</span>\n                invoke_psci_fn <span class="token operator">=</span> __invoke_psci_fn_hvc<span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> SMCCC_CONDUIT_SMC<span class="token operator">:</span>\n                invoke_psci_fn <span class="token operator">=</span> __invoke_psci_fn_smc<span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">default</span><span class="token operator">:</span>\n                <span class="token function">WARN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Unexpected PSCI conduit %d\\n&quot;</span><span class="token punctuation">,</span> conduit<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        psci_conduit <span class="token operator">=</span> conduit<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">__invoke_psci_fn_hvc</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> function_id<span class="token punctuation">,</span>\n                        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg0<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg1<span class="token punctuation">,</span>\n                        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg2<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">struct</span> <span class="token class-name">arm_smccc_res</span> res<span class="token punctuation">;</span>\n\n        <span class="token function">arm_smccc_hvc</span><span class="token punctuation">(</span>function_id<span class="token punctuation">,</span> arg0<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> res<span class="token punctuation">.</span>a0<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">__invoke_psci_fn_smc</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> function_id<span class="token punctuation">,</span>\n                        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg0<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg1<span class="token punctuation">,</span>\n                        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg2<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">struct</span> <span class="token class-name">arm_smccc_res</span> res<span class="token punctuation">;</span>\n\n        <span class="token function">arm_smccc_smc</span><span class="token punctuation">(</span>function_id<span class="token punctuation">,</span> arg0<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> res<span class="token punctuation">.</span>a0<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div><h3 id="psci-probe" tabindex="-1"><a class="header-anchor" href="#psci-probe" aria-hidden="true">#</a> psci_probe</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">psci_probe</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        u32 ver <span class="token operator">=</span> <span class="token function">psci_0_2_get_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">pr_info</span><span class="token punctuation">(</span><span class="token string">&quot;PSCIv%d.%d detected in firmware.\\n&quot;</span><span class="token punctuation">,</span>\n                        <span class="token function">PSCI_VERSION_MAJOR</span><span class="token punctuation">(</span>ver<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                        <span class="token function">PSCI_VERSION_MINOR</span><span class="token punctuation">(</span>ver<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PSCI_VERSION_MAJOR</span><span class="token punctuation">(</span>ver<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">PSCI_VERSION_MINOR</span><span class="token punctuation">(</span>ver<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">pr_err</span><span class="token punctuation">(</span><span class="token string">&quot;Conflicting PSCI version detected.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token function">psci_0_2_set_functions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">psci_init_migrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PSCI_VERSION_MAJOR</span><span class="token punctuation">(</span>ver<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">psci_init_smccc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">psci_init_cpu_suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">psci_init_system_suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">psci_init_system_reset2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">kvm_init_hyp_services</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="setup-functions" tabindex="-1"><a class="header-anchor" href="#setup-functions" aria-hidden="true">#</a> setup functions</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> __init <span class="token function">psci_0_2_set_functions</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token function">pr_info</span><span class="token punctuation">(</span><span class="token string">&quot;Using standard PSCI v0.2 function IDs\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        psci_ops <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">psci_operations</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token punctuation">.</span>get_version <span class="token operator">=</span> psci_0_2_get_version<span class="token punctuation">,</span>\n                <span class="token punctuation">.</span>cpu_suspend <span class="token operator">=</span> psci_0_2_cpu_suspend<span class="token punctuation">,</span>\n                <span class="token punctuation">.</span>cpu_off <span class="token operator">=</span> psci_0_2_cpu_off<span class="token punctuation">,</span>\n                <span class="token punctuation">.</span>cpu_on <span class="token operator">=</span> psci_0_2_cpu_on<span class="token punctuation">,</span>\n                <span class="token punctuation">.</span>migrate <span class="token operator">=</span> psci_0_2_migrate<span class="token punctuation">,</span>\n                <span class="token punctuation">.</span>affinity_info <span class="token operator">=</span> psci_affinity_info<span class="token punctuation">,</span>\n                <span class="token punctuation">.</span>migrate_info_type <span class="token operator">=</span> psci_migrate_info_type<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        arm_pm_restart <span class="token operator">=</span> psci_sys_reset<span class="token punctuation">;</span>\n\n        pm_power_off <span class="token operator">=</span> psci_sys_poweroff<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="detect-cpu-running-trusted-os" tabindex="-1"><a class="header-anchor" href="#detect-cpu-running-trusted-os" aria-hidden="true">#</a> detect CPU running trusted OS</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> __init <span class="token function">psci_init_migrate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> cpuid<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> type<span class="token punctuation">,</span> cpu <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n\n        type <span class="token operator">=</span> psci_ops<span class="token punctuation">.</span><span class="token function">migrate_info_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> PSCI_0_2_TOS_MP<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">pr_info</span><span class="token punctuation">(</span><span class="token string">&quot;Trusted OS migration not required\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> PSCI_RET_NOT_SUPPORTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">pr_info</span><span class="token punctuation">(</span><span class="token string">&quot;MIGRATE_INFO_TYPE not supported.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> PSCI_0_2_TOS_UP_MIGRATE <span class="token operator">&amp;&amp;</span>\n            type <span class="token operator">!=</span> PSCI_0_2_TOS_UP_NO_MIGRATE<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">pr_err</span><span class="token punctuation">(</span><span class="token string">&quot;MIGRATE_INFO_TYPE returned unknown type (%d)\\n&quot;</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        cpuid <span class="token operator">=</span> <span class="token function">psci_migrate_info_up_cpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>cpuid <span class="token operator">&amp;</span> <span class="token operator">~</span>MPIDR_HWID_BITMASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">pr_warn</span><span class="token punctuation">(</span><span class="token string">&quot;MIGRATE_INFO_UP_CPU reported invalid physical ID (0x%lx)\\n&quot;</span><span class="token punctuation">,</span>\n                        cpuid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        cpu <span class="token operator">=</span> <span class="token function">get_logical_index</span><span class="token punctuation">(</span>cpuid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        resident_cpu <span class="token operator">=</span> cpu <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> cpu <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n\n        <span class="token function">pr_info</span><span class="token punctuation">(</span><span class="token string">&quot;Trusted OS resident on physical CPU 0x%lx\\n&quot;</span><span class="token punctuation">,</span> cpuid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h2 id="boot-secondary" tabindex="-1"><a class="header-anchor" href="#boot-secondary" aria-hidden="true">#</a> boot_secondary</h2><p>When we boot CPU, <code>boot_secondary</code> should be invokoed.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/*\n * Boot a secondary CPU, and assign it the specified idle task.\n * This also gives us the initial stack to use for this CPU.\n */</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">boot_secondary</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> cpu<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>idle<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cpu_operations</span> <span class="token operator">*</span>ops <span class="token operator">=</span> <span class="token function">get_cpu_ops</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ops<span class="token operator">-&gt;</span>cpu_boot<span class="token punctuation">)</span>\n                <span class="token keyword">return</span> ops<span class="token operator">-&gt;</span><span class="token function">cpu_boot</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token operator">-</span>EOPNOTSUPP<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Assume the CPU&#39;s enable-method is <code>psci</code>, the handler should be <code>cpu_psci_cpu_boot</code>. The function first gets the physical address of <code>secondary_entry</code> and then invokes <code>cpu_on</code> which was assigned with <code>psci_0_2_cpu_on</code>.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cpu_psci_cpu_boot</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> cpu<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">int</span> err <span class="token operator">=</span> psci_ops<span class="token punctuation">.</span><span class="token function">cpu_on</span><span class="token punctuation">(</span><span class="token function">cpu_logical_map</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">__pa_symbol</span><span class="token punctuation">(</span>secondary_entry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n                <span class="token function">pr_err</span><span class="token punctuation">(</span><span class="token string">&quot;failed to boot CPU%d (%d)\\n&quot;</span><span class="token punctuation">,</span> cpu<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> err<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">psci_0_2_cpu_on</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> cpuid<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> entry_point<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">__psci_cpu_on</span><span class="token punctuation">(</span><span class="token function">PSCI_FN_NATIVE</span><span class="token punctuation">(</span><span class="token number">0</span>_2<span class="token punctuation">,</span> CPU_ON<span class="token punctuation">)</span><span class="token punctuation">,</span> cpuid<span class="token punctuation">,</span> entry_point<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="virtualization" tabindex="-1"><a class="header-anchor" href="#virtualization" aria-hidden="true">#</a> Virtualization</h2><p>ARM/ARM64 KVM provides PSCI emulation for guest.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * kvm_psci_call - handle PSCI call if r0 value is in range\n * @vcpu: Pointer to the VCPU struct\n *\n * Handle PSCI calls from guests through traps from HVC instructions.\n * The calling convention is similar to SMC calls to the secure world\n * where the function number is placed in r0.\n *\n * This function returns: &gt; 0 (success), 0 (success but exit to user\n * space), and &lt; 0 (errors)\n *\n * Errors:\n * -EINVAL: Unrecognized PSCI function\n */</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kvm_psci_call</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">kvm_psci_version</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> vcpu<span class="token operator">-&gt;</span>kvm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> KVM_ARM_PSCI_1_0<span class="token operator">:</span>\n                <span class="token keyword">return</span> <span class="token function">kvm_psci_1_0_call</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> KVM_ARM_PSCI_0_2<span class="token operator">:</span>\n                <span class="token keyword">return</span> <span class="token function">kvm_psci_0_2_call</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> KVM_ARM_PSCI_0_1<span class="token operator">:</span>\n                <span class="token keyword">return</span> <span class="token function">kvm_psci_0_1_call</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">default</span><span class="token operator">:</span>\n                <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kvm_psci_0_2_call</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">struct</span> <span class="token class-name">kvm</span> <span class="token operator">*</span>kvm <span class="token operator">=</span> vcpu<span class="token operator">-&gt;</span>kvm<span class="token punctuation">;</span>\n        u32 psci_fn <span class="token operator">=</span> <span class="token function">smccc_get_function</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> val<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">switch</span> <span class="token punctuation">(</span>psci_fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> PSCI_0_2_FN_PSCI_VERSION<span class="token operator">:</span>\n                <span class="token comment">/*\n                 * Bits[31:16] = Major Version = 0\n                 * Bits[15:0] = Minor Version = 2\n                 */</span>\n                val <span class="token operator">=</span> KVM_ARM_PSCI_0_2<span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> PSCI_0_2_FN_CPU_SUSPEND<span class="token operator">:</span>\n        <span class="token keyword">case</span> PSCI_0_2_FN64_CPU_SUSPEND<span class="token operator">:</span>\n                val <span class="token operator">=</span> <span class="token function">kvm_psci_vcpu_suspend</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> PSCI_0_2_FN_CPU_OFF<span class="token operator">:</span>\n                <span class="token function">kvm_psci_vcpu_off</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                val <span class="token operator">=</span> PSCI_RET_SUCCESS<span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> PSCI_0_2_FN_CPU_ON<span class="token operator">:</span>\n        <span class="token keyword">case</span> PSCI_0_2_FN64_CPU_ON<span class="token operator">:</span>\n                <span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kvm<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                val <span class="token operator">=</span> <span class="token function">kvm_psci_vcpu_on</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kvm<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> PSCI_0_2_FN_AFFINITY_INFO<span class="token operator">:</span>\n        <span class="token keyword">case</span> PSCI_0_2_FN64_AFFINITY_INFO<span class="token operator">:</span>\n                val <span class="token operator">=</span> <span class="token function">kvm_psci_vcpu_affinity_info</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> PSCI_0_2_FN_MIGRATE_INFO_TYPE<span class="token operator">:</span>\n                <span class="token comment">/*\n                 * Trusted OS is MP hence does not require migration\n                 * or\n                 * Trusted OS is not present\n                 */</span>\n                val <span class="token operator">=</span> PSCI_0_2_TOS_MP<span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> PSCI_0_2_FN_SYSTEM_OFF<span class="token operator">:</span>\n                <span class="token function">kvm_psci_system_off</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">/*\n                 * We should&#39;nt be going back to guest VCPU after\n                 * receiving SYSTEM_OFF request.\n                 *\n                 * If user space accidently/deliberately resumes\n                 * guest VCPU after SYSTEM_OFF request then guest\n                 * VCPU should see internal failure from PSCI return\n                 * value. To achieve this, we preload r0 (or x0) with\n                 * PSCI return value INTERNAL_FAILURE.\n                 */</span>\n                val <span class="token operator">=</span> PSCI_RET_INTERNAL_FAILURE<span class="token punctuation">;</span>\n                ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> PSCI_0_2_FN_SYSTEM_RESET<span class="token operator">:</span>\n                <span class="token function">kvm_psci_system_reset</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">/*\n                 * Same reason as SYSTEM_OFF for preloading r0 (or x0)\n                 * with PSCI return value INTERNAL_FAILURE.\n                 */</span>\n                val <span class="token operator">=</span> PSCI_RET_INTERNAL_FAILURE<span class="token punctuation">;</span>\n                ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">default</span><span class="token operator">:</span>\n                val <span class="token operator">=</span> PSCI_RET_NOT_SUPPORTED<span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token function">smccc_set_retval</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br></div></div>',31),e={render:function(n,s){return p}}}}]);