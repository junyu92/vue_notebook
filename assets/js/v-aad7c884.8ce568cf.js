"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[1537],{6626:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-aad7c884",path:"/rust/kernel_module_in_rust.html",title:"Kernel Module in Rust",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Basic",slug:"basic",children:[{level:3,title:"C API",slug:"c-api",children:[]},{level:3,title:"kernel binding",slug:"kernel-binding",children:[]},{level:3,title:"error",slug:"error",children:[]},{level:3,title:"bindgen",slug:"bindgen",children:[]}]},{level:2,title:"Wrappers",slug:"wrappers",children:[{level:3,title:"Memory allocation",slug:"memory-allocation",children:[]},{level:3,title:"Device register",slug:"device-register",children:[]}]},{level:2,title:"Kernel Module",slug:"kernel-module",children:[{level:3,title:"preliminary: How the Linux Kernel Module is loaded",slug:"preliminary-how-the-linux-kernel-module-is-loaded",children:[]},{level:3,title:"Templete for Rust Kernel Module",slug:"templete-for-rust-kernel-module",children:[]},{level:3,title:"How the Rust Kernel Module is loaded",slug:"how-the-rust-kernel-module-is-loaded",children:[]},{level:3,title:"How the Rust Kernel Module manages its heap-allocated objects",slug:"how-the-rust-kernel-module-manages-its-heap-allocated-objects",children:[]},{level:3,title:"Unload Rust kernel Module",slug:"unload-rust-kernel-module",children:[]}]}],filePathRelative:"rust/kernel_module_in_rust.md",git:{updatedTime:1629972527e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:1}]}}},2881:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(6252).uE)('<h1 id="kernel-module-in-rust" tabindex="-1"><a class="header-anchor" href="#kernel-module-in-rust" aria-hidden="true">#</a> Kernel Module in Rust</h1><p>[[poc]]</p><h2 id="basic" tabindex="-1"><a class="header-anchor" href="#basic" aria-hidden="true">#</a> Basic</h2><h3 id="c-api" tabindex="-1"><a class="header-anchor" href="#c-api" aria-hidden="true">#</a> C API</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pub extern c\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="kernel-binding" tabindex="-1"><a class="header-anchor" href="#kernel-binding" aria-hidden="true">#</a> kernel binding</h3><ul><li>./rust/bindings_generated.rs</li></ul><h3 id="error" tabindex="-1"><a class="header-anchor" href="#error" aria-hidden="true">#</a> error</h3><p>Kernel error to Rust error</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token class-name">Error</span><span class="token punctuation">::</span><span class="token function">from_kernel_errno</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="bindgen" tabindex="-1"><a class="header-anchor" href="#bindgen" aria-hidden="true">#</a> bindgen</h3><p>run <code>bindgen</code> on the kernel headers to generate automatic Rust FFI bindings.</p><h2 id="wrappers" tabindex="-1"><a class="header-anchor" href="#wrappers" aria-hidden="true">#</a> Wrappers</h2><p>Rust for Linux framwork probides a lot of wrappers.</p><ul><li>Memory management <ul><li>Allocator</li></ul></li><li>Device <ul><li>chrdev</li><li>miscdev</li></ul></li><li>error</li><li>rbtree</li></ul><h3 id="memory-allocation" tabindex="-1"><a class="header-anchor" href="#memory-allocation" aria-hidden="true">#</a> Memory allocation</h3><h3 id="device-register" tabindex="-1"><a class="header-anchor" href="#device-register" aria-hidden="true">#</a> Device register</h3><h4 id="register" tabindex="-1"><a class="header-anchor" href="#register" aria-hidden="true">#</a> Register</h4><h4 id="deregister" tabindex="-1"><a class="header-anchor" href="#deregister" aria-hidden="true">#</a> Deregister</h4><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Sync</span><span class="token operator">&gt;</span> <span class="token class-name">Drop</span> <span class="token keyword">for</span> <span class="token class-name">Registration</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">/// Removes the registration from the kernel if it has completed successfully before.</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>registered <span class="token punctuation">{</span>\n            <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token namespace">bindings<span class="token punctuation">::</span></span><span class="token function">misc_deregister</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span>mdev<span class="token punctuation">)</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="kernel-module" tabindex="-1"><a class="header-anchor" href="#kernel-module" aria-hidden="true">#</a> Kernel Module</h2><h3 id="preliminary-how-the-linux-kernel-module-is-loaded" tabindex="-1"><a class="header-anchor" href="#preliminary-how-the-linux-kernel-module-is-loaded" aria-hidden="true">#</a> preliminary: How the Linux Kernel Module is loaded</h3><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>TODO</p></div><h3 id="templete-for-rust-kernel-module" tabindex="-1"><a class="header-anchor" href="#templete-for-rust-kernel-module" aria-hidden="true">#</a> Templete for Rust Kernel Module</h3><p>We can build a kernel module with the following templete.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token macro property">module!</span> <span class="token punctuation">{</span>\n    <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token class-name">KvmModule</span><span class="token punctuation">,</span>\n    name<span class="token punctuation">:</span> <span class="token string">b&quot;rust_kvm&quot;</span><span class="token punctuation">,</span>\n    author<span class="token punctuation">:</span> <span class="token string">b&quot;Zhang Junyu&quot;</span><span class="token punctuation">,</span>\n    license<span class="token punctuation">:</span> <span class="token string">b&quot;GPL v2&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">struct</span> <span class="token type-definition class-name">KvmModule</span><span class="token punctuation">;</span>\n\n<span class="token keyword">impl</span> <span class="token class-name">KernelModule</span> <span class="token keyword">for</span> <span class="token class-name">KvmModule</span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">KvmModule</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="how-the-rust-kernel-module-is-loaded" tabindex="-1"><a class="header-anchor" href="#how-the-rust-kernel-module-is-loaded" aria-hidden="true">#</a> How the Rust Kernel Module is loaded</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code>            <span class="token comment">// Loadable modules need to export the `{{init,cleanup}}_module` identifiers</span>\n            <span class="token attribute attr-name">#[cfg(MODULE)]</span>\n            <span class="token attribute attr-name">#[doc(hidden)]</span>\n            <span class="token attribute attr-name">#[no_mangle]</span>\n            <span class="token keyword">pub</span> <span class="token keyword">extern</span> \\&quot;<span class="token class-name">C</span>\\&quot; <span class="token keyword">fn</span> <span class="token function-definition function">init_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">kernel<span class="token punctuation">::</span>c_types<span class="token punctuation">::</span></span>c_int <span class="token punctuation">{</span><span class="token punctuation">{</span>\n                <span class="token function">__init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n            <span class="token keyword">fn</span> <span class="token function-definition function">__init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">kernel<span class="token punctuation">::</span>c_types<span class="token punctuation">::</span></span>c_int <span class="token punctuation">{</span><span class="token punctuation">{</span>\n                <span class="token keyword">match</span> <span class="token operator">&lt;</span><span class="token punctuation">{</span>type_<span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token namespace">kernel<span class="token punctuation">::</span></span><span class="token class-name">KernelModule</span><span class="token operator">&gt;</span><span class="token punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n                    <span class="token class-name">Ok</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n                        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n                            <span class="token constant">__MOD</span> <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">}</span>\n                        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">}</span>\n                    <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n                        <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">to_kernel_errno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="how-the-rust-kernel-module-manages-its-heap-allocated-objects" tabindex="-1"><a class="header-anchor" href="#how-the-rust-kernel-module-manages-its-heap-allocated-objects" aria-hidden="true">#</a> How the Rust Kernel Module manages its heap-allocated objects</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code>            <span class="token keyword">static</span> <span class="token keyword">mut</span> <span class="token constant">__MOD</span><span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token punctuation">{</span>type_<span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="unload-rust-kernel-module" tabindex="-1"><a class="header-anchor" href="#unload-rust-kernel-module" aria-hidden="true">#</a> Unload Rust kernel Module</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>            #<span class="token punctuation">[</span><span class="token function">cfg</span><span class="token punctuation">(</span>MODULE<span class="token punctuation">)</span><span class="token punctuation">]</span>\n            #<span class="token punctuation">[</span><span class="token function">doc</span><span class="token punctuation">(</span>hidden<span class="token punctuation">)</span><span class="token punctuation">]</span>\n            #<span class="token punctuation">[</span>no_mangle<span class="token punctuation">]</span>\n            pub <span class="token keyword">extern</span> \\&quot;C\\&quot; fn <span class="token function">cleanup_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n                <span class="token function">__exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n            fn <span class="token function">__exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n                unsafe <span class="token punctuation">{</span><span class="token punctuation">{</span>\n                    <span class="token comment">// Invokes `drop()` on `__MOD`, which should be used for cleanup.</span>\n                    __MOD <span class="token operator">=</span> None<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',32),t={render:function(n,s){return e}}}}]);