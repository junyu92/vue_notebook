"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[6038],{3316:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-63bca398",path:"/kernel/memory/memory_order.html",title:"Memory Ordering",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Memory types",slug:"memory-types",children:[{level:3,title:"Normal memory",slug:"normal-memory",children:[]},{level:3,title:"Device memory",slug:"device-memory",children:[]}]},{level:2,title:"Barriers",slug:"barriers",children:[]}],filePathRelative:"kernel/memory/memory_order.md",git:{updatedTime:1626850534e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:1}]}}},45:(s,n,a)=>{a.r(n),a.d(n,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="memory-ordering" tabindex="-1"><a class="header-anchor" href="#memory-ordering" aria-hidden="true">#</a> Memory Ordering</h1><p>If your code interacts directly either with the hardware or with code executing on other cores, or if it directly loads or writes instructions to be executed, or modifies page tables, you need to be aware of memory ordering issues.</p><p>The ARMv8 architecture employs a <strong>weakly-ordered</strong> model of memory. this means that the order of <strong>memory accesses is not</strong><strong>required to be the same as the program order for load and</strong><strong>store operations</strong>.</p><h2 id="memory-types" tabindex="-1"><a class="header-anchor" href="#memory-types" aria-hidden="true">#</a> Memory types</h2><p><code>MAIR_ELn</code> stores the memory types table which is a map from 3-bit index into memory types.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/*\n * Default MAIR_EL1. MT_NORMAL_TAGGED is initially mapped as Normal memory and\n * changed during __cpu_setup to Normal Tagged if the system supports MTE.\n */\n#define MAIR_EL1_SET                                                    \\\n        (MAIR_ATTRIDX(MAIR_ATTR_DEVICE_nGnRnE, MT_DEVICE_nGnRnE) |      \\\n         MAIR_ATTRIDX(MAIR_ATTR_DEVICE_nGnRE, MT_DEVICE_nGnRE) |        \\\n         MAIR_ATTRIDX(MAIR_ATTR_DEVICE_GRE, MT_DEVICE_GRE) |            \\\n         MAIR_ATTRIDX(MAIR_ATTR_NORMAL_NC, MT_NORMAL_NC) |              \\\n         MAIR_ATTRIDX(MAIR_ATTR_NORMAL, MT_NORMAL) |                    \\\n         MAIR_ATTRIDX(MAIR_ATTR_NORMAL_WT, MT_NORMAL_WT) |              \\\n         MAIR_ATTRIDX(MAIR_ATTR_NORMAL, MT_NORMAL_TAGGED))\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>        mov_q   mair<span class="token punctuation">,</span> MAIR_EL1_SET\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>TLB entry stores the 3-bit index.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/*\n * Memory types available.\n *\n * IMPORTANT: MT_NORMAL must be index 0 since vm_get_page_prot() may &#39;or&#39; in\n *            the MT_NORMAL_TAGGED memory type for PROT_MTE mappings. Note\n *            that protection_map[] only contains MT_NORMAL attributes.\n */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MT_NORMAL</span>               <span class="token expression"><span class="token number">0</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MT_NORMAL_TAGGED</span>        <span class="token expression"><span class="token number">1</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MT_NORMAL_NC</span>            <span class="token expression"><span class="token number">2</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MT_NORMAL_WT</span>            <span class="token expression"><span class="token number">3</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MT_DEVICE_nGnRnE</span>        <span class="token expression"><span class="token number">4</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MT_DEVICE_nGnRE</span>         <span class="token expression"><span class="token number">5</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MT_DEVICE_GRE</span>           <span class="token expression"><span class="token number">6</span></span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROT_DEVICE_nGnRnE</span>      <span class="token expression"><span class="token punctuation">(</span>PROT_DEFAULT <span class="token operator">|</span> PTE_PXN <span class="token operator">|</span> PTE_UXN <span class="token operator">|</span> PTE_WRITE <span class="token operator">|</span> <span class="token function">PTE_ATTRINDX</span><span class="token punctuation">(</span>MT_DEVICE_nGnRnE<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROT_DEVICE_nGnRE</span>       <span class="token expression"><span class="token punctuation">(</span>PROT_DEFAULT <span class="token operator">|</span> PTE_PXN <span class="token operator">|</span> PTE_UXN <span class="token operator">|</span> PTE_WRITE <span class="token operator">|</span> <span class="token function">PTE_ATTRINDX</span><span class="token punctuation">(</span>MT_DEVICE_nGnRE<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROT_NORMAL_NC</span>          <span class="token expression"><span class="token punctuation">(</span>PROT_DEFAULT <span class="token operator">|</span> PTE_PXN <span class="token operator">|</span> PTE_UXN <span class="token operator">|</span> PTE_WRITE <span class="token operator">|</span> <span class="token function">PTE_ATTRINDX</span><span class="token punctuation">(</span>MT_NORMAL_NC<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROT_NORMAL_WT</span>          <span class="token expression"><span class="token punctuation">(</span>PROT_DEFAULT <span class="token operator">|</span> PTE_PXN <span class="token operator">|</span> PTE_UXN <span class="token operator">|</span> PTE_WRITE <span class="token operator">|</span> <span class="token function">PTE_ATTRINDX</span><span class="token punctuation">(</span>MT_NORMAL_WT<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROT_NORMAL</span>             <span class="token expression"><span class="token punctuation">(</span>PROT_DEFAULT <span class="token operator">|</span> PTE_PXN <span class="token operator">|</span> PTE_UXN <span class="token operator">|</span> PTE_WRITE <span class="token operator">|</span> <span class="token function">PTE_ATTRINDX</span><span class="token punctuation">(</span>MT_NORMAL<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROT_NORMAL_TAGGED</span>      <span class="token expression"><span class="token punctuation">(</span>PROT_DEFAULT <span class="token operator">|</span> PTE_PXN <span class="token operator">|</span> PTE_UXN <span class="token operator">|</span> PTE_WRITE <span class="token operator">|</span> <span class="token function">PTE_ATTRINDX</span><span class="token punctuation">(</span>MT_NORMAL_TAGGED<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li>G(Gathering)</li><li>R(Re-order)</li><li>E(Early Write Acknowledgement)</li></ul><h3 id="normal-memory" tabindex="-1"><a class="header-anchor" href="#normal-memory" aria-hidden="true">#</a> Normal memory</h3><p>You can use Normal memory for all code and for most data regions in memory.</p><p>The processor can <strong>re-order, repeat, and merge accesses</strong> to Normal memory.</p><p>Furthermore, address locations that are marked as Normal can be accessed speculatively by the processor, so that data or instructions can be read from memory without being explicitly referenced in the program, or in advance of the actual execution of an explicit reference.</p><p><strong>Normal memory implements a weakly-ordered memory mode.</strong></p><h3 id="device-memory" tabindex="-1"><a class="header-anchor" href="#device-memory" aria-hidden="true">#</a> Device memory</h3><p>You can use Device memory for all memory regions where an access might have a side-effect.</p><h2 id="barriers" tabindex="-1"><a class="header-anchor" href="#barriers" aria-hidden="true">#</a> Barriers</h2><p>The ARM architecture includes barrier instructions to force access ordering and access completion at a specific point.</p><p>There are three types of barrier instruction provided by the architecture:</p><ul><li>isb</li><li>dmb</li><li>dsb</li></ul>',21),p={render:function(s,n){return e}}}}]);