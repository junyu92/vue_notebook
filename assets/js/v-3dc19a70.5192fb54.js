"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[4650],{5719:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-3dc19a70",path:"/kernel/time/clocksource_and_timekeeping.html",title:"Clocksource and Timerkeeping",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Introduction to clocksource",slug:"introduction-to-clocksource",children:[]},{level:2,title:"struct clocksource",slug:"struct-clocksource",children:[{level:3,title:"Jiffies based clocksource",slug:"jiffies-based-clocksource",children:[]},{level:3,title:"Register a clocksource",slug:"register-a-clocksource",children:[]},{level:3,title:"Select a clocksource",slug:"select-a-clocksource",children:[]}]}],filePathRelative:"kernel/time/clocksource_and_timekeeping.md",git:{updatedTime:1627640859e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:1}]}}},2488:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var e=a(6252);const p=(0,e._)("h1",{id:"clocksource-and-timerkeeping",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#clocksource-and-timerkeeping","aria-hidden":"true"},"#"),(0,e.Uk)(" Clocksource and Timerkeeping")],-1),c={class:"table-of-contents"},t=(0,e.Uk)("Introduction to clocksource"),o=(0,e.Uk)("struct clocksource"),l=(0,e.Uk)("Jiffies based clocksource"),r=(0,e.Uk)("Register a clocksource"),u=(0,e.Uk)("Select a clocksource"),i=(0,e.uE)('<h2 id="introduction-to-clocksource" tabindex="-1"><a class="header-anchor" href="#introduction-to-clocksource" aria-hidden="true">#</a> Introduction to clocksource</h2><p>A System can own multiple clocksource.</p><h2 id="struct-clocksource" tabindex="-1"><a class="header-anchor" href="#struct-clocksource" aria-hidden="true">#</a> struct clocksource</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/**\n * struct clocksource - hardware abstraction for a free running counter\n *      Provides mostly state-free accessors to the underlying hardware.\n *      This is the structure used for system time.\n *\n * @name:               ptr to clocksource name\n * @list:               list head for registration\n * @rating:             rating value for selection (higher is better)\n *                      To avoid rating inflation the following\n *                      list should give you a guide as to how\n *                      to assign your clocksource a rating\n *                      1-99: Unfit for real use\n *                              Only available for bootup and testing purposes.\n *                      100-199: Base level usability.\n *                              Functional for real use, but not desired.\n *                      200-299: Good.\n *                              A correct and usable clocksource.\n *                      300-399: Desired.\n *                              A reasonably fast and accurate clocksource.\n *                      400-499: Perfect\n *                              The ideal clocksource. A must-use where\n *                              available.\n * @read:               returns a cycle value, passes clocksource as argument\n * @enable:             optional function to enable the clocksource\n * @disable:            optional function to disable the clocksource\n * @mask:               bitmask for two&#39;s complement\n *                      subtraction of non 64 bit counters\n * @mult:               cycle to nanosecond multiplier\n * @shift:              cycle to nanosecond divisor (power of two)\n * @max_idle_ns:        max idle time permitted by the clocksource (nsecs)\n * @maxadj:             maximum adjustment value to mult (~11%)\n * @max_cycles:         maximum safe cycle value which won&#39;t overflow on multiplication\n * @flags:              flags describing special properties\n * @archdata:           arch-specific data\n * @suspend:            suspend function for the clocksource, if necessary\n * @resume:             resume function for the clocksource, if necessary\n * @mark_unstable:      Optional function to inform the clocksource driver that\n *                      the watchdog marked the clocksource unstable\n * @owner:              module reference, must be set by clocksource in modules\n *\n * Note: This struct is not used in hotpathes of the timekeeping code\n * because the timekeeper caches the hot path fields in its own data\n * structure, so no line cache alignment is required,\n *\n * The pointer to the clocksource itself is handed to the read\n * callback. If you need extra information there you can wrap struct\n * clocksource into your own struct. Depending on the amount of\n * information you need you should consider to cache line align that\n * structure.\n */</span>\n<span class="token keyword">struct</span> <span class="token class-name">clocksource</span> <span class="token punctuation">{</span>\n        <span class="token function">u64</span> <span class="token punctuation">(</span><span class="token operator">*</span>read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">clocksource</span> <span class="token operator">*</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        u64 mask<span class="token punctuation">;</span>\n        u32 mult<span class="token punctuation">;</span>\n        u32 shift<span class="token punctuation">;</span>\n        u64 max_idle_ns<span class="token punctuation">;</span>\n        u32 maxadj<span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_ARCH_CLOCKSOURCE_DATA</span></span>\n        <span class="token keyword">struct</span> <span class="token class-name">arch_clocksource_data</span> archdata<span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n        u64 max_cycles<span class="token punctuation">;</span>\n        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">list_head</span> list<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> rating<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>enable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">clocksource</span> <span class="token operator">*</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>disable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">clocksource</span> <span class="token operator">*</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">;</span>\n        <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>suspend<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">clocksource</span> <span class="token operator">*</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>resume<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">clocksource</span> <span class="token operator">*</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>mark_unstable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">clocksource</span> <span class="token operator">*</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>tick_stable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">clocksource</span> <span class="token operator">*</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/* private: */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_CLOCKSOURCE_WATCHDOG</span></span>\n        <span class="token comment">/* Watchdog related data, used by the framework */</span>\n        <span class="token keyword">struct</span> <span class="token class-name">list_head</span> wd_list<span class="token punctuation">;</span>\n        u64 cs_last<span class="token punctuation">;</span>\n        u64 wd_last<span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n        <span class="token keyword">struct</span> <span class="token class-name">module</span> <span class="token operator">*</span>owner<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br></div></div><h3 id="jiffies-based-clocksource" tabindex="-1"><a class="header-anchor" href="#jiffies-based-clocksource" aria-hidden="true">#</a> Jiffies based clocksource</h3><p>Linux kernel provides a jiffies based clocksource.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/*\n * The Jiffies based clocksource is the lowest common\n * denominator clock source which should function on\n * all systems. It has the same coarse resolution as\n * the timer interrupt frequency HZ and it suffers\n * inaccuracies caused by missed or lost timer\n * interrupts and the inability for the timer\n * interrupt hardware to accuratly tick at the\n * requested HZ value. It is also not recommended\n * for &quot;tick-less&quot; systems.\n */</span>\n<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">clocksource</span> clocksource_jiffies <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">.</span>name           <span class="token operator">=</span> <span class="token string">&quot;jiffies&quot;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">.</span>rating         <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/* lowest valid rating*/</span>\n        <span class="token punctuation">.</span>read           <span class="token operator">=</span> jiffies_read<span class="token punctuation">,</span>\n        <span class="token punctuation">.</span>mask           <span class="token operator">=</span> <span class="token function">CLOCKSOURCE_MASK</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">.</span>mult           <span class="token operator">=</span> TICK_NSEC <span class="token operator">&lt;&lt;</span> JIFFIES_SHIFT<span class="token punctuation">,</span> <span class="token comment">/* details above */</span>\n        <span class="token punctuation">.</span>shift          <span class="token operator">=</span> JIFFIES_SHIFT<span class="token punctuation">,</span>\n        <span class="token punctuation">.</span>max_cycles     <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">init_jiffies_clocksource</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">__clocksource_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>clocksource_jiffies<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">core_initcall</span><span class="token punctuation">(</span>init_jiffies_clocksource<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="register-a-clocksource" tabindex="-1"><a class="header-anchor" href="#register-a-clocksource" aria-hidden="true">#</a> Register a clocksource</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">clocksource_register_hz</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">clocksource</span> <span class="token operator">*</span>cs<span class="token punctuation">,</span> u32 hz<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">__clocksource_register_scale</span><span class="token punctuation">(</span>cs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> hz<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * __clocksource_register_scale - Used to install new clocksources\n * @cs:         clocksource to be registered\n * @scale:      Scale factor multiplied against freq to get clocksource hz\n * @freq:       clocksource frequency (cycles per second) divided by scale\n *\n * Returns -EBUSY if registration fails, zero otherwise.\n *\n * This *SHOULD NOT* be called directly! Please use the\n * clocksource_register_hz() or clocksource_register_khz helper functions.\n */</span>\n<span class="token keyword">int</span> <span class="token function">__clocksource_register_scale</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">clocksource</span> <span class="token operator">*</span>cs<span class="token punctuation">,</span> u32 scale<span class="token punctuation">,</span> u32 freq<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">;</span>\n\n        <span class="token function">clocksource_arch_init</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/* Initialize mult/shift and max_idle_ns */</span>\n        <span class="token function">__clocksource_update_freq_scale</span><span class="token punctuation">(</span>cs<span class="token punctuation">,</span> scale<span class="token punctuation">,</span> freq<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/* Add clocksource to the clocksource list */</span>\n        <span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>clocksource_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">clocksource_watchdog_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">clocksource_enqueue</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">clocksource_enqueue_watchdog</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">clocksource_watchdog_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">clocksource_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">clocksource_select_watchdog</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">__clocksource_suspend_select</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>clocksource_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">EXPORT_SYMBOL_GPL</span><span class="token punctuation">(</span>__clocksource_register_scale<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h3 id="select-a-clocksource" tabindex="-1"><a class="header-anchor" href="#select-a-clocksource" aria-hidden="true">#</a> Select a clocksource</h3><p>Linux will select a preferable clocksource.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[    0.000000] clocksource: arch_sys_counter: mask: 0xffffffffffffff max_cycles: 0x1cd42e208c, max_idle_ns: 881590405314 ns\n[    0.991761] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns\n[    2.396419] clocksource: Switched to clocksource arch_sys_counter\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__clocksource_select</span><span class="token punctuation">(</span>bool skipcur<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        bool oneshot <span class="token operator">=</span> <span class="token function">tick_oneshot_mode_active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">clocksource</span> <span class="token operator">*</span>best<span class="token punctuation">,</span> <span class="token operator">*</span>cs<span class="token punctuation">;</span>\n\n        <span class="token comment">/* Find the best suitable clocksource */</span>\n        best <span class="token operator">=</span> <span class="token function">clocksource_find_best</span><span class="token punctuation">(</span>oneshot<span class="token punctuation">,</span> skipcur<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>best<span class="token punctuation">)</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strlen</span><span class="token punctuation">(</span>override_name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">goto</span> found<span class="token punctuation">;</span>\n\n        <span class="token comment">/* Check for the override clocksource. */</span>\n        <span class="token function">list_for_each_entry</span><span class="token punctuation">(</span>cs<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clocksource_list<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>skipcur <span class="token operator">&amp;&amp;</span> cs <span class="token operator">==</span> curr_clocksource<span class="token punctuation">)</span>\n                        <span class="token keyword">continue</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>cs<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> override_name<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n                        <span class="token keyword">continue</span><span class="token punctuation">;</span>\n                <span class="token comment">/*\n                 * Check to make sure we don&#39;t switch to a non-highres\n                 * capable clocksource if the tick code is in oneshot\n                 * mode (highres or nohz)\n                 */</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cs<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> CLOCK_SOURCE_VALID_FOR_HRES<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> oneshot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token comment">/* Override clocksource cannot be used. */</span>\n                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cs<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> CLOCK_SOURCE_UNSTABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                                <span class="token function">pr_warn</span><span class="token punctuation">(</span><span class="token string">&quot;Override clocksource %s is unstable and not HRT compatible - cannot switch while in HRT/NOHZ mode\\n&quot;</span><span class="token punctuation">,</span>\n                                        cs<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                                override_name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                                <span class="token comment">/*\n                                 * The override cannot be currently verified.\n                                 * Deferring to let the watchdog check.\n                                 */</span>\n                                <span class="token function">pr_info</span><span class="token punctuation">(</span><span class="token string">&quot;Override clocksource %s is not currently HRT compatible - deferring\\n&quot;</span><span class="token punctuation">,</span>\n                                        cs<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span>\n                        <span class="token comment">/* Override clocksource can be used. */</span>\n                        best <span class="token operator">=</span> cs<span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\nfound<span class="token operator">:</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>curr_clocksource <span class="token operator">!=</span> best <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">timekeeping_notify</span><span class="token punctuation">(</span>best<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">pr_info</span><span class="token punctuation">(</span><span class="token string">&quot;Switched to clocksource %s\\n&quot;</span><span class="token punctuation">,</span> best<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                curr_clocksource <span class="token operator">=</span> best<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div>',13),k={render:function(n,s){const a=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("nav",c,[(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#introduction-to-clocksource"},{default:(0,e.w5)((()=>[t])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#struct-clocksource"},{default:(0,e.w5)((()=>[o])),_:1}),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#jiffies-based-clocksource"},{default:(0,e.w5)((()=>[l])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#register-a-clocksource"},{default:(0,e.w5)((()=>[r])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#select-a-clocksource"},{default:(0,e.w5)((()=>[u])),_:1})])])])])]),i],64)}}}}]);