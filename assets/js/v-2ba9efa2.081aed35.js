"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[3827],{3184:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-2ba9efa2",path:"/kernel/misc/rseq.html",title:"Restartable Sequences",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Enable rseq for the current thread",slug:"enable-rseq-for-the-current-thread",children:[]},{level:2,title:"Prior to exit to userspace",slug:"prior-to-exit-to-userspace",children:[]},{level:2,title:"deregister",slug:"deregister",children:[]}],filePathRelative:"kernel/misc/rseq.md",git:{updatedTime:1631761118e3,contributors:[{name:"Zhang Junyu",email:"junyu92@163.com",commits:1}]}}},2908:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="restartable-sequences" tabindex="-1"><a class="header-anchor" href="#restartable-sequences" aria-hidden="true">#</a> Restartable Sequences</h1><ol><li>invoke syscall rseq to setup restartable sequences for caller thread</li></ol><h2 id="enable-rseq-for-the-current-thread" tabindex="-1"><a class="header-anchor" href="#enable-rseq-for-the-current-thread" aria-hidden="true">#</a> Enable rseq for the current thread</h2><p>register <code>rseq</code> and <code>rseq_sig</code> for current thread.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>        current<span class="token operator">-&gt;</span>rseq <span class="token operator">=</span> rseq<span class="token punctuation">;</span>\n        current<span class="token operator">-&gt;</span>rseq_sig <span class="token operator">=</span> sig<span class="token punctuation">;</span>\n        <span class="token comment">/*\n         * If rseq was previously inactive, and has just been\n         * registered, ensure the cpu_id_start and cpu_id fields\n         * are updated before returning to user-space.\n         */</span>\n        <span class="token function">rseq_set_notify_resume</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>rseq_set_notify_resume</code> sets <code>TIF_NOTIFY_RESUME</code> for curernt thread flag.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">rseq_set_notify_resume</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>t<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>rseq<span class="token punctuation">)</span>\n                <span class="token function">set_tsk_thread_flag</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> TIF_NOTIFY_RESUME<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="prior-to-exit-to-userspace" tabindex="-1"><a class="header-anchor" href="#prior-to-exit-to-userspace" aria-hidden="true">#</a> Prior to exit to userspace</h2><p>Prior to exit to userspace, kernel checks weather <code>_TIF_NOTIFY_RESUME</code> was setted. If it was, <code>__rseq_handle_notify_resume</code> should be invoked.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/*\n * This resume handler must always be executed between any of:\n * - preemption,\n * - signal delivery,\n * and return to user-space.\n *\n * This is how we can ensure that the entire rseq critical section\n * will issue the commit instruction only if executed atomically with\n * respect to other threads scheduled on the same CPU, and with respect\n * to signal handlers.\n */</span>\n<span class="token keyword">void</span> <span class="token function">__rseq_handle_notify_resume</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ksignal</span> <span class="token operator">*</span>ksig<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">pt_regs</span> <span class="token operator">*</span>regs<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>t <span class="token operator">=</span> current<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> ret<span class="token punctuation">,</span> sig<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> PF_EXITING<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n        ret <span class="token operator">=</span> <span class="token function">rseq_ip_fixup</span><span class="token punctuation">(</span>regs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">goto</span> error<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">rseq_update_cpu_id</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">goto</span> error<span class="token punctuation">;</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n\nerror<span class="token operator">:</span>\n        sig <span class="token operator">=</span> ksig <span class="token operator">?</span> ksig<span class="token operator">-&gt;</span>sig <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token function">force_sigsegv</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="deregister" tabindex="-1"><a class="header-anchor" href="#deregister" aria-hidden="true">#</a> deregister</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token function">SYSCALL_DEFINE4</span><span class="token punctuation">(</span>rseq<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">rseq</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> rseq<span class="token punctuation">,</span> u32<span class="token punctuation">,</span> rseq_len<span class="token punctuation">,</span>\n                <span class="token keyword">int</span><span class="token punctuation">,</span> flags<span class="token punctuation">,</span> u32<span class="token punctuation">,</span> sig<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token comment">// ...</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> RSEQ_FLAG_UNREGISTER<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> <span class="token operator">~</span>RSEQ_FLAG_UNREGISTER<span class="token punctuation">)</span>\n                        <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>\n                <span class="token comment">/* Unregister rseq for current thread. */</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>rseq <span class="token operator">!=</span> rseq <span class="token operator">||</span> <span class="token operator">!</span>current<span class="token operator">-&gt;</span>rseq<span class="token punctuation">)</span>\n                        <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>rseq_len <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>rseq<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                        <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>rseq_sig <span class="token operator">!=</span> sig<span class="token punctuation">)</span>\n                        <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span>\n                ret <span class="token operator">=</span> <span class="token function">rseq_reset_rseq_cpu_id</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>\n                        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n                current<span class="token operator">-&gt;</span>rseq <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n                current<span class="token operator">-&gt;</span>rseq_sig <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n\t<span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div>',12),p={render:function(n,s){return e}}}}]);