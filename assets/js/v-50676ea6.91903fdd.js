"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[1100],{3877:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-50676ea6",path:"/kernel/virtualization/vfio.html",title:"VFIO",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"PCI configuration space",slug:"pci-configuration-space",children:[]},{level:2,title:"MSI",slug:"msi",children:[{level:3,title:"MSI configuration",slug:"msi-configuration",children:[]},{level:3,title:"MSI-X configuration",slug:"msi-x-configuration",children:[]}]},{level:2,title:"eventfd",slug:"eventfd",children:[]},{level:2,title:"irqfd",slug:"irqfd",children:[{level:3,title:"Host registers irq for vfio device",slug:"host-registers-irq-for-vfio-device",children:[]},{level:3,title:"Hardware trigers interrupt",slug:"hardware-trigers-interrupt",children:[]}]},{level:2,title:"Q&A",slug:"q-a",children:[]},{level:2,title:"Reference",slug:"reference",children:[]}],filePathRelative:"kernel/virtualization/vfio.md",git:{updatedTime:1624615626e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:2}]}}},6615:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="vfio" tabindex="-1"><a class="header-anchor" href="#vfio" aria-hidden="true">#</a> VFIO</h1><h2 id="pci-configuration-space" tabindex="-1"><a class="header-anchor" href="#pci-configuration-space" aria-hidden="true">#</a> PCI configuration space</h2><p>guest OS configures PCI device triggers MMIO abort, and QEMU should invoke <code>vfio_pci_write_config</code> to handle it.</p><h2 id="msi" tabindex="-1"><a class="header-anchor" href="#msi" aria-hidden="true">#</a> MSI</h2><p>MSIs are initialized after guest started running.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>vfio_realize\n  - vfio_get_device\n  - vfio_msix_early_setup: gets msi-x info\n  - vfio_add_capabilities\n      - vfio_add_std_cap\n          - vfio_msi_setup\n          - vfio_msix_setup\n\n(guest running)\nvfio_pci_write_config\n  - vfio_msi_enable\n  - vfio_msix_enable: enables msix interruption\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="msi-configuration" tabindex="-1"><a class="header-anchor" href="#msi-configuration" aria-hidden="true">#</a> MSI configuration</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vfio_pci_write_config</span><span class="token punctuation">(</span>PCIDevice <span class="token operator">*</span>pdev<span class="token punctuation">,</span>\n                           <span class="token class-name">uint32_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/* ... */</span>\n\n    <span class="token comment">/* MSI/MSI-X Enabling/Disabling */</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>pdev<span class="token operator">-&gt;</span>cap_present <span class="token operator">&amp;</span> QEMU_PCI_CAP_MSI <span class="token operator">&amp;&amp;</span>\n        <span class="token function">ranges_overlap</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> len<span class="token punctuation">,</span> pdev<span class="token operator">-&gt;</span>msi_cap<span class="token punctuation">,</span> vdev<span class="token operator">-&gt;</span>msi_cap_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> is_enabled<span class="token punctuation">,</span> was_enabled <span class="token operator">=</span> <span class="token function">msi_enabled</span><span class="token punctuation">(</span>pdev<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">pci_default_write_config</span><span class="token punctuation">(</span>pdev<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> val<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        is_enabled <span class="token operator">=</span> <span class="token function">msi_enabled</span><span class="token punctuation">(</span>pdev<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>was_enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>is_enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">vfio_msi_enable</span><span class="token punctuation">(</span>vdev<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">vfio_msi_disable</span><span class="token punctuation">(</span>vdev<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token function">vfio_update_msi</span><span class="token punctuation">(</span>vdev<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">vfio_msi_enable</span><span class="token punctuation">(</span>VFIOPCIDevice <span class="token operator">*</span>vdev<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> ret<span class="token punctuation">,</span> i<span class="token punctuation">;</span>\n\n    <span class="token function">vfio_disable_interrupts</span><span class="token punctuation">(</span>vdev<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    vdev<span class="token operator">-&gt;</span>nr_vectors <span class="token operator">=</span> <span class="token function">msi_nr_vectors_allocated</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>pdev<span class="token punctuation">)</span><span class="token punctuation">;</span>\nretry<span class="token operator">:</span>\n    vdev<span class="token operator">-&gt;</span>msi_vectors <span class="token operator">=</span> <span class="token function">g_new0</span><span class="token punctuation">(</span>VFIOMSIVector<span class="token punctuation">,</span> vdev<span class="token operator">-&gt;</span>nr_vectors<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vdev<span class="token operator">-&gt;</span>nr_vectors<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        VFIOMSIVector <span class="token operator">*</span>vector <span class="token operator">=</span> <span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>msi_vectors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n        vector<span class="token operator">-&gt;</span>vdev <span class="token operator">=</span> vdev<span class="token punctuation">;</span>\n        vector<span class="token operator">-&gt;</span>virq <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n        vector<span class="token operator">-&gt;</span>use <span class="token operator">=</span> true<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">event_notifier_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vector<span class="token operator">-&gt;</span>interrupt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">error_report</span><span class="token punctuation">(</span><span class="token string">&quot;vfio: Error: event_notifier_init failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token function">qemu_set_fd_handler</span><span class="token punctuation">(</span><span class="token function">event_notifier_get_fd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vector<span class="token operator">-&gt;</span>interrupt<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                            vfio_msi_interrupt<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> vector<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * Attempt to enable route through KVM irqchip,\n         * default to userspace handling if unavailable.\n         */</span>\n        <span class="token function">vfio_add_kvm_msi_virq</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> vector<span class="token punctuation">,</span> i<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/* Set interrupt type prior to possible interrupts */</span>\n    vdev<span class="token operator">-&gt;</span>interrupt <span class="token operator">=</span> VFIO_INT_MSI<span class="token punctuation">;</span>\n\n    ret <span class="token operator">=</span> <span class="token function">vfio_enable_vectors</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">error_report</span><span class="token punctuation">(</span><span class="token string">&quot;vfio: Error: Failed to setup MSI fds: %m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> vdev<span class="token operator">-&gt;</span>nr_vectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">error_report</span><span class="token punctuation">(</span><span class="token string">&quot;vfio: Error: Failed to enable %d &quot;</span>\n                         <span class="token string">&quot;MSI vectors, retry with %d&quot;</span><span class="token punctuation">,</span> vdev<span class="token operator">-&gt;</span>nr_vectors<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vdev<span class="token operator">-&gt;</span>nr_vectors<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            VFIOMSIVector <span class="token operator">*</span>vector <span class="token operator">=</span> <span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>msi_vectors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>vector<span class="token operator">-&gt;</span>virq <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">vfio_remove_kvm_msi_virq</span><span class="token punctuation">(</span>vector<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token function">qemu_set_fd_handler</span><span class="token punctuation">(</span><span class="token function">event_notifier_get_fd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vector<span class="token operator">-&gt;</span>interrupt<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                                <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">event_notifier_cleanup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vector<span class="token operator">-&gt;</span>interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_LIVE_UPGRADE</span></span>\n            <span class="token function">local_mig_unregister_vfio_fd_name</span><span class="token punctuation">(</span>vector<span class="token operator">-&gt;</span>interrupt<span class="token punctuation">.</span>rfd<span class="token punctuation">,</span>\n                    vdev<span class="token operator">-&gt;</span>vbasedev<span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n                    LOCAL_MIGRATION_FD_VFIO_EVENTFD<span class="token punctuation">,</span>\n                    LOCAL_MIGRATION_FD_VFIO_EVENTFD_END<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n        <span class="token punctuation">}</span>\n\n        <span class="token function">g_free</span><span class="token punctuation">(</span>vdev<span class="token operator">-&gt;</span>msi_vectors<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ret <span class="token operator">!=</span> vdev<span class="token operator">-&gt;</span>nr_vectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            vdev<span class="token operator">-&gt;</span>nr_vectors <span class="token operator">=</span> ret<span class="token punctuation">;</span>\n            <span class="token keyword">goto</span> retry<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        vdev<span class="token operator">-&gt;</span>nr_vectors <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * Failing to setup MSI doesn&#39;t really fall within any specification.\n         * Let&#39;s try leaving interrupts disabled and hope the guest figures\n         * out to fall back to INTx for this device.\n         */</span>\n        <span class="token function">error_report</span><span class="token punctuation">(</span><span class="token string">&quot;vfio: Error: Failed to enable MSI&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        vdev<span class="token operator">-&gt;</span>interrupt <span class="token operator">=</span> VFIO_INT_NONE<span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">trace_vfio_msi_enable</span><span class="token punctuation">(</span>vdev<span class="token operator">-&gt;</span>vbasedev<span class="token punctuation">.</span>name<span class="token punctuation">,</span> vdev<span class="token operator">-&gt;</span>nr_vectors<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br></div></div><h3 id="msi-x-configuration" tabindex="-1"><a class="header-anchor" href="#msi-x-configuration" aria-hidden="true">#</a> MSI-X configuration</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vfio_pci_write_config</span><span class="token punctuation">(</span>PCIDevice <span class="token operator">*</span>pdev<span class="token punctuation">,</span>\n                           <span class="token class-name">uint32_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/* ... */</span>\n\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pdev<span class="token operator">-&gt;</span>cap_present <span class="token operator">&amp;</span> QEMU_PCI_CAP_MSIX <span class="token operator">&amp;&amp;</span>\n        <span class="token function">ranges_overlap</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> len<span class="token punctuation">,</span> pdev<span class="token operator">-&gt;</span>msix_cap<span class="token punctuation">,</span> MSIX_CAP_LENGTH<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> is_enabled<span class="token punctuation">,</span> was_enabled <span class="token operator">=</span> <span class="token function">msix_enabled</span><span class="token punctuation">(</span>pdev<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">pci_default_write_config</span><span class="token punctuation">(</span>pdev<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> val<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        is_enabled <span class="token operator">=</span> <span class="token function">msix_enabled</span><span class="token punctuation">(</span>pdev<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>was_enabled <span class="token operator">&amp;&amp;</span> is_enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">vfio_msix_enable</span><span class="token punctuation">(</span>vdev<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>was_enabled <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>is_enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">vfio_msix_disable</span><span class="token punctuation">(</span>vdev<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">vfio_msix_enable</span><span class="token punctuation">(</span>VFIOPCIDevice <span class="token operator">*</span>vdev<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token function">vfio_disable_interrupts</span><span class="token punctuation">(</span>vdev<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    vdev<span class="token operator">-&gt;</span>msi_vectors <span class="token operator">=</span> <span class="token function">g_new0</span><span class="token punctuation">(</span>VFIOMSIVector<span class="token punctuation">,</span> vdev<span class="token operator">-&gt;</span>msix<span class="token operator">-&gt;</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    vdev<span class="token operator">-&gt;</span>interrupt <span class="token operator">=</span> VFIO_INT_MSIX<span class="token punctuation">;</span>\n\n    <span class="token comment">/*\n     * Some communication channels between VF &amp; PF or PF &amp; fw rely on the\n     * physical state of the device and expect that enabling MSI-X from the\n     * guest enables the same on the host.  When our guest is Linux, the\n     * guest driver call to pci_enable_msix() sets the enabling bit in the\n     * MSI-X capability, but leaves the vector table masked.  We therefore\n     * can&#39;t rely on a vector_use callback (from request_irq() in the guest)\n     * to switch the physical device into MSI-X mode because that may come a\n     * long time after pci_enable_msix().  This code enables vector 0 with\n     * triggering to userspace, then immediately release the vector, leaving\n     * the physical device with no vectors enabled, but MSI-X enabled, just\n     * like the guest view.\n     */</span>\n    <span class="token function">vfio_msix_vector_do_use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>pdev<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">vfio_msix_vector_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>pdev<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msix_set_vector_notifiers</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>pdev<span class="token punctuation">,</span> vfio_msix_vector_use<span class="token punctuation">,</span>\n                                  vfio_msix_vector_release<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">error_report</span><span class="token punctuation">(</span><span class="token string">&quot;vfio: msix_set_vector_notifiers failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">trace_vfio_msix_enable</span><span class="token punctuation">(</span>vdev<span class="token operator">-&gt;</span>vbasedev<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">vfio_msix_vector_do_use</span><span class="token punctuation">(</span>PCIDevice <span class="token operator">*</span>pdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> nr<span class="token punctuation">,</span>\n                                   MSIMessage <span class="token operator">*</span>msg<span class="token punctuation">,</span> IOHandler <span class="token operator">*</span>handler<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    VFIOPCIDevice <span class="token operator">*</span>vdev <span class="token operator">=</span> <span class="token function">DO_UPCAST</span><span class="token punctuation">(</span>VFIOPCIDevice<span class="token punctuation">,</span> pdev<span class="token punctuation">,</span> pdev<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    VFIOMSIVector <span class="token operator">*</span>vector<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>\n\n    <span class="token function">trace_vfio_msix_vector_do_use</span><span class="token punctuation">(</span>vdev<span class="token operator">-&gt;</span>vbasedev<span class="token punctuation">.</span>name<span class="token punctuation">,</span> nr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    vector <span class="token operator">=</span> <span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>msi_vectors<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vector<span class="token operator">-&gt;</span>use<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        vector<span class="token operator">-&gt;</span>vdev <span class="token operator">=</span> vdev<span class="token punctuation">;</span>\n        vector<span class="token operator">-&gt;</span>virq <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">event_notifier_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vector<span class="token operator">-&gt;</span>interrupt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">error_report</span><span class="token punctuation">(</span><span class="token string">&quot;vfio: Error: event_notifier_init failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        vector<span class="token operator">-&gt;</span>use <span class="token operator">=</span> true<span class="token punctuation">;</span>\n        <span class="token function">msix_vector_use</span><span class="token punctuation">(</span>pdev<span class="token punctuation">,</span> nr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">qemu_set_fd_handler</span><span class="token punctuation">(</span><span class="token function">event_notifier_get_fd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vector<span class="token operator">-&gt;</span>interrupt<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                        handler<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> vector<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/*\n     * Attempt to enable route through KVM irqchip,\n     * default to userspace handling if unavailable.\n     */</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>vector<span class="token operator">-&gt;</span>virq <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">vfio_remove_kvm_msi_virq</span><span class="token punctuation">(</span>vector<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token function">vfio_update_kvm_msi_virq</span><span class="token punctuation">(</span>vector<span class="token punctuation">,</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> pdev<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">vfio_add_kvm_msi_virq</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> vector<span class="token punctuation">,</span> nr<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/*\n     * We don&#39;t want to have the host allocate all possible MSI vectors\n     * for a device if they&#39;re not in use, so we shutdown and incrementally\n     * increase them as needed.\n     */</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>vdev<span class="token operator">-&gt;</span>nr_vectors <span class="token operator">&lt;</span> nr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">vfio_disable_irqindex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>vbasedev<span class="token punctuation">,</span> VFIO_PCI_MSIX_IRQ_INDEX<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        vdev<span class="token operator">-&gt;</span>nr_vectors <span class="token operator">=</span> nr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        ret <span class="token operator">=</span> <span class="token function">vfio_enable_vectors</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">error_report</span><span class="token punctuation">(</span><span class="token string">&quot;vfio: failed to enable vectors, %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> argsz<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">vfio_irq_set</span> <span class="token operator">*</span>irq_set<span class="token punctuation">;</span>\n        <span class="token class-name">int32_t</span> <span class="token operator">*</span>pfd<span class="token punctuation">;</span>\n\n        argsz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>irq_set<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pfd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        irq_set <span class="token operator">=</span> <span class="token function">g_malloc0</span><span class="token punctuation">(</span>argsz<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        irq_set<span class="token operator">-&gt;</span>argsz <span class="token operator">=</span> argsz<span class="token punctuation">;</span>\n        irq_set<span class="token operator">-&gt;</span>flags <span class="token operator">=</span> VFIO_IRQ_SET_DATA_EVENTFD <span class="token operator">|</span>\n                         VFIO_IRQ_SET_ACTION_TRIGGER<span class="token punctuation">;</span>\n        irq_set<span class="token operator">-&gt;</span>index <span class="token operator">=</span> VFIO_PCI_MSIX_IRQ_INDEX<span class="token punctuation">;</span>\n        irq_set<span class="token operator">-&gt;</span>start <span class="token operator">=</span> nr<span class="token punctuation">;</span>\n        irq_set<span class="token operator">-&gt;</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        pfd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">int32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>irq_set<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>vector<span class="token operator">-&gt;</span>virq <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token operator">*</span>pfd <span class="token operator">=</span> <span class="token function">event_notifier_get_fd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vector<span class="token operator">-&gt;</span>kvm_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token operator">*</span>pfd <span class="token operator">=</span> <span class="token function">event_notifier_get_fd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vector<span class="token operator">-&gt;</span>interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        ret <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>vdev<span class="token operator">-&gt;</span>vbasedev<span class="token punctuation">.</span>fd<span class="token punctuation">,</span> VFIO_DEVICE_SET_IRQS<span class="token punctuation">,</span> irq_set<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">g_free</span><span class="token punctuation">(</span>irq_set<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">error_report</span><span class="token punctuation">(</span><span class="token string">&quot;vfio: failed to modify vector, %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/* Disable PBA emulation when nothing more is pending. */</span>\n    <span class="token function">clear_bit</span><span class="token punctuation">(</span>nr<span class="token punctuation">,</span> vdev<span class="token operator">-&gt;</span>msix<span class="token operator">-&gt;</span>pending<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find_first_bit</span><span class="token punctuation">(</span>vdev<span class="token operator">-&gt;</span>msix<span class="token operator">-&gt;</span>pending<span class="token punctuation">,</span>\n                       vdev<span class="token operator">-&gt;</span>nr_vectors<span class="token punctuation">)</span> <span class="token operator">==</span> vdev<span class="token operator">-&gt;</span>nr_vectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">memory_region_set_enabled</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>pdev<span class="token punctuation">.</span>msix_pba_mmio<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">trace_vfio_msix_pba_disable</span><span class="token punctuation">(</span>vdev<span class="token operator">-&gt;</span>vbasedev<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br></div></div><h2 id="eventfd" tabindex="-1"><a class="header-anchor" href="#eventfd" aria-hidden="true">#</a> eventfd</h2><p>irqfd and ioeventfd are both based on eventfd</p><ul><li><em>irqfd</em>: inject intruction into guest</li><li><em>ioeventfd</em>: device signals the drivers(QEMU)</li></ul><h2 id="irqfd" tabindex="-1"><a class="header-anchor" href="#irqfd" aria-hidden="true">#</a> irqfd</h2><h3 id="host-registers-irq-for-vfio-device" tabindex="-1"><a class="header-anchor" href="#host-registers-irq-for-vfio-device" aria-hidden="true">#</a> Host registers irq for vfio device</h3><p><code>ioctl VFIO_DEVICE_SET_IRQS</code> is used to register interruption handler.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>todo</p></div><h3 id="hardware-trigers-interrupt" tabindex="-1"><a class="header-anchor" href="#hardware-trigers-interrupt" aria-hidden="true">#</a> Hardware trigers interrupt</h3><p>When hardware triggers an interrupt, <code>gic_handle_irq</code> should handle it.</p><p>Since the irq was registered via <code>vfio_msi_set_vector_signal</code>, the handler function is <code>vfio_msihandler</code>.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">vfio_msi_set_vector_signal</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">vfio_pci_device</span> <span class="token operator">*</span>vdev<span class="token punctuation">,</span>\n                                      <span class="token keyword">int</span> vector<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> bool msix<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token comment">/* ... */</span>\n\n        ret <span class="token operator">=</span> <span class="token function">request_irq</span><span class="token punctuation">(</span>irq<span class="token punctuation">,</span> vfio_msihandler<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                          vdev<span class="token operator">-&gt;</span>ctx<span class="token punctuation">[</span>vector<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/*\n * MSI/MSI-X\n */</span>\n<span class="token keyword">static</span> <span class="token class-name">irqreturn_t</span> <span class="token function">vfio_msihandler</span><span class="token punctuation">(</span><span class="token keyword">int</span> irq<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">struct</span> <span class="token class-name">eventfd_ctx</span> <span class="token operator">*</span>trigger <span class="token operator">=</span> arg<span class="token punctuation">;</span>\n\n        <span class="token function">eventfd_signal</span><span class="token punctuation">(</span>trigger<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> IRQ_HANDLED<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>Let&#39;s ignore the defails of eventfd.</p><details class="custom-container details"><p>Here is how the device injects interruption into guest.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>        __vgic_its_check_cache+0\n        kvm_arch_set_irq_inatomic+140\n        irqfd_wakeup+228\n        __wake_up_common+144\n        __wake_up_locked_key+64\n        eventfd_signal+144\n        vfio_msihandler+36\n        __handle_irq_event_percpu+120\n        handle_irq_event_percpu+64\n        handle_irq_event+76\n        handle_fasteoi_irq+212\n        generic_handle_irq+52\n        __handle_domain_irq+108\n        gic_handle_irq+212\n        el[x]_irq\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></details><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q&amp;A</h2><ul><li>When an interrupt triggered, how the kernel receives <code>device_id</code>?</li></ul><p>The <code>device_id</code> is stored within <code>struct kvm_kernel_irq_routing_entry</code> (see <code>kvm_arch_set_irq_inatomic</code> for more details).</p><p>The content of <code>struct kvm_kernel_irq_routing_entry</code> was initialized within function <code>kvm_set_routing_entry</code> which had called by <code>ioctl KVM_SET_GSI_ROUTING</code>.</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2><blockquote><p>https://kernelgo.org/vfio-insight.html</p></blockquote>',32),e={render:function(n,s){return p}}}}]);