"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[2498],{4326:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-7ceb523a",path:"/kernel/boot/kaslr.html",title:"Kernel Address Space Layout Randomization",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"KASLR on ARM64",slug:"kaslr-on-arm64",children:[]}],filePathRelative:"kernel/boot/kaslr.md",git:{updatedTime:1627543229e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:1}]}}},3108:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="kernel-address-space-layout-randomization" tabindex="-1"><a class="header-anchor" href="#kernel-address-space-layout-randomization" aria-hidden="true">#</a> Kernel Address Space Layout Randomization</h1><p>With kernel address space layout randomization (KASLR), the kernel is loaded to a random location in memory.</p><p>Loading the kernel to a random location can protect against attacks that rely on knowledge of the kernel addresses.</p><h2 id="kaslr-on-arm64" tabindex="-1"><a class="header-anchor" href="#kaslr-on-arm64" aria-hidden="true">#</a> KASLR on ARM64</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>__primary_switch:\n\n// ...\n\n#ifdef CONFIG_RANDOMIZE_BASE\n        ldr     x8, =__primary_switched\n        adrp    x0, __PHYS_OFFSET\n        blr     x8\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>__primary_switch</code> invokes <code>__primary_switched</code></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>__primary_switched::\n\n// ...\n\n#ifdef CONFIG_RANDOMIZE_BASE\n        tst     x23, ~(MIN_KIMG_ALIGN - 1)      // already running randomized?\n        b.ne    0f\n        mov     x0, x21                         // pass FDT address in x0\n        bl      kaslr_early_init                // parse FDT for KASLR options\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>primary_switched</code> invokes <code>kaslr_early_init</code> which fetchs <code>kaslr_seed</code> from dtb.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>u64 __init <span class="token function">kaslr_early_init</span><span class="token punctuation">(</span>u64 dt_phys<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">void</span> <span class="token operator">*</span>fdt<span class="token punctuation">;</span>\n        u64 seed<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> module_range<span class="token punctuation">;</span>\n        <span class="token keyword">const</span> u8 <span class="token operator">*</span>cmdline<span class="token punctuation">,</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> size<span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * Set a reasonable default for module_alloc_base in case\n         * we end up running with module randomization disabled.\n         */</span>\n        module_alloc_base <span class="token operator">=</span> <span class="token punctuation">(</span>u64<span class="token punctuation">)</span>_etext <span class="token operator">-</span> MODULES_VSIZE<span class="token punctuation">;</span>\n        <span class="token function">__flush_dcache_area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>module_alloc_base<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>module_alloc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * Try to map the FDT early. If this fails, we simply bail,\n         * and proceed with KASLR disabled. We will make another\n         * attempt at mapping the FDT in setup_machine()\n         */</span>\n        <span class="token function">early_fixmap_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fdt <span class="token operator">=</span> <span class="token function">fixmap_remap_fdt</span><span class="token punctuation">(</span>dt_phys<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">,</span> PAGE_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fdt<span class="token punctuation">)</span>\n                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * Retrieve (and wipe) the seed from the FDT\n         */</span>\n        seed <span class="token operator">=</span> <span class="token function">get_kaslr_seed</span><span class="token punctuation">(</span>fdt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>seed<span class="token punctuation">)</span>\n                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * Check if &#39;nokaslr&#39; appears on the command line, and\n         * return 0 if that is the case.\n         */</span>\n        cmdline <span class="token operator">=</span> <span class="token function">kaslr_get_cmdline</span><span class="token punctuation">(</span>fdt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        str <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmdline<span class="token punctuation">,</span> <span class="token string">&quot;nokaslr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> cmdline <span class="token operator">||</span> <span class="token punctuation">(</span>str <span class="token operator">&gt;</span> cmdline <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>str <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * OK, so we are proceeding with KASLR enabled. Calculate a suitable\n         * kernel image offset from the seed. Let&#39;s place the kernel in the\n         * middle half of the VMALLOC area (VA_BITS_MIN - 2), and stay clear of\n         * the lower and upper quarters to avoid colliding with other\n         * allocations.\n         * Even if we could randomize at page granularity for 16k and 64k pages,\n         * let&#39;s always round to 2 MB so we don&#39;t interfere with the ability to\n         * map using contiguous PTEs\n         */</span>\n        mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>VA_BITS_MIN <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>SZ_2M <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        offset <span class="token operator">=</span> <span class="token function">BIT</span><span class="token punctuation">(</span>VA_BITS_MIN <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>seed <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/* use the top 16 bits to randomize the linear region */</span>\n        memstart_offset_seed <span class="token operator">=</span> seed <span class="token operator">&gt;&gt;</span> <span class="token number">48</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_KASAN<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token comment">/*\n                 * KASAN does not expect the module region to intersect the\n                 * vmalloc region, since shadow memory is allocated for each\n                 * module at load time, whereas the vmalloc region is shadowed\n                 * by KASAN zero pages. So keep modules out of the vmalloc\n                 * region if KASAN is enabled, and put the kernel well within\n                 * 4 GB of the module region.\n                 */</span>\n                <span class="token keyword">return</span> offset <span class="token operator">%</span> SZ_2G<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_RANDOMIZE_MODULE_REGION_FULL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">/*\n                 * Randomize the module region over a 2 GB window covering the\n                 * kernel. This reduces the risk of modules leaking information\n                 * about the address of the kernel itself, but results in\n                 * branches between modules and the core kernel that are\n                 * resolved via PLTs. (Branches between modules will be\n                 * resolved normally.)\n                 */</span>\n                module_range <span class="token operator">=</span> SZ_2G <span class="token operator">-</span> <span class="token punctuation">(</span>u64<span class="token punctuation">)</span><span class="token punctuation">(</span>_end <span class="token operator">-</span> _stext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                module_alloc_base <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u64<span class="token punctuation">)</span>_end <span class="token operator">+</span> offset <span class="token operator">-</span> SZ_2G<span class="token punctuation">,</span>\n                                        <span class="token punctuation">(</span>u64<span class="token punctuation">)</span>MODULES_VADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token comment">/*\n                 * Randomize the module region by setting module_alloc_base to\n                 * a PAGE_SIZE multiple in the range [_etext - MODULES_VSIZE,\n                 * _stext) . This guarantees that the resulting region still\n                 * covers [_stext, _etext], and that all relative branches can\n                 * be resolved without veneers.\n                 */</span>\n                module_range <span class="token operator">=</span> MODULES_VSIZE <span class="token operator">-</span> <span class="token punctuation">(</span>u64<span class="token punctuation">)</span><span class="token punctuation">(</span>_etext <span class="token operator">-</span> _stext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                module_alloc_base <span class="token operator">=</span> <span class="token punctuation">(</span>u64<span class="token punctuation">)</span>_etext <span class="token operator">+</span> offset <span class="token operator">-</span> MODULES_VSIZE<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">/* use the lower 21 bits to randomize the base of the module region */</span>\n        module_alloc_base <span class="token operator">+=</span> <span class="token punctuation">(</span>module_range <span class="token operator">*</span> <span class="token punctuation">(</span>seed <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">21</span><span class="token punctuation">;</span>\n        module_alloc_base <span class="token operator">&amp;=</span> PAGE_MASK<span class="token punctuation">;</span>\n\n        <span class="token function">__flush_dcache_area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>module_alloc_base<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>module_alloc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">__flush_dcache_area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>memstart_offset_seed<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>memstart_offset_seed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> offset<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br></div></div><p><code>kaslr_early_init</code> returns 0 means kaslr is disabled, call <code>start_kernel</code>. otherwise, return to <code>_primary_switch</code>.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>        cbz     x0, 0f                          // KASLR disabled? just proceed\n        orr     x23, x23, x0                    // record KASLR offset\n        ldp     x29, x30, [sp], #16             // we must enable KASLR, return\n        ret                                     // to __primary_switch()\n0:\n#endif\n        add     sp, sp, #16\n        mov     x29, #0\n        mov     x30, #0\n        b       start_kernel\nENDPROC(__primary_switched)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Now <code>x23</code> contains the offset of kaslr, invoke <code>__create_page_tables</code> to recreate kernel page table.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>        /*\n         * If we return here, we have a KASLR displacement in x23 which we need\n         * to take into account by discarding the current kernel mapping and\n         * creating a new one.\n         */\n        pre_disable_mmu_workaround\n        msr     sctlr_el1, x20                  // disable the MMU\n        isb\n        bl      __create_page_tables            // recreate kernel mapping\n\n        tlbi    vmalle1                         // Remove any stale TLB entries\n        dsb     nsh\n\n        msr     sctlr_el1, x19                  // re-enable the MMU\n        isb\n        ic      iallu                           // flush instructions fetched\n        dsb     nsh                             // via old mapping\n        isb\n\n        bl      __relocate_kernel\n#endif\n\n// ...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>',13),p={render:function(n,s){return e}}}}]);