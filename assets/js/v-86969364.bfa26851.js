"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[2738],{883:(n,a,e)=>{e.r(a),e.d(a,{data:()=>s});const s={key:"v-86969364",path:"/debug/gdb_python.html",title:"GDB Python",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"First step - Loading scripts",slug:"first-step-loading-scripts",children:[]},{level:2,title:"Value",slug:"value",children:[]},{level:2,title:"Basic",slug:"basic",children:[]},{level:2,title:"Interactive with BREAKPOINT",slug:"interactive-with-breakpoint",children:[{level:3,title:"__init__",slug:"init",children:[]},{level:3,title:"stop method",slug:"stop-method",children:[]}]},{level:2,title:"Command",slug:"command",children:[]},{level:2,title:"Signal",slug:"signal",children:[]},{level:2,title:"Pretty Printer",slug:"pretty-printer",children:[]},{level:2,title:"Reference",slug:"reference",children:[]}],filePathRelative:"debug/gdb_python.md",git:{updatedTime:1624615626e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:1}]}}},7891:(n,a,e)=>{e.r(a),e.d(a,{default:()=>t});const s=(0,e(6252).uE)('<h1 id="gdb-python" tabindex="-1"><a class="header-anchor" href="#gdb-python" aria-hidden="true">#</a> GDB Python</h1><h2 id="first-step-loading-scripts" tabindex="-1"><a class="header-anchor" href="#first-step-loading-scripts" aria-hidden="true">#</a> First step - Loading scripts</h2><ul><li><code>source my_script.py</code></li><li><code>gdb my_program -ex&quot;source my_script.py&quot;</code></li><li>Enable auto-load python-scripts</li><li>Rename your script to <code>objfile-gdb.py</code></li><li>Fix security-related settings</li><li>...</li></ul><h2 id="value" tabindex="-1"><a class="header-anchor" href="#value" aria-hidden="true">#</a> Value</h2><h2 id="basic" tabindex="-1"><a class="header-anchor" href="#basic" aria-hidden="true">#</a> Basic</h2><ul><li><code>gdb.parse_and_eval(string)</code></li></ul><p>Parse expression, which must be a string, as an expression in the current language, evaluate it, and return the result as a gdb.Value.</p><ul><li><code>gdb.write(string [, stream])</code></li></ul><p>Print a string to GDB&#39;s paginated output stream.</p><h2 id="interactive-with-breakpoint" tabindex="-1"><a class="header-anchor" href="#interactive-with-breakpoint" aria-hidden="true">#</a> Interactive with BREAKPOINT</h2><h3 id="init" tabindex="-1"><a class="header-anchor" href="#init" aria-hidden="true">#</a> <code>__init__</code></h3><p><code>Function: Breakpoint.__init__ ([ source ][, function ][, label ][, line ], ][ internal ][, temporary ][, qualified ])</code></p><p>The optional internal argument allows the breakpoint to become invisible to the user. The breakpoint will neither be reported when created, nor will it be listed in the output from info breakpoints (but will be listed with the maint info breakpoints command).</p><h3 id="stop-method" tabindex="-1"><a class="header-anchor" href="#stop-method" aria-hidden="true">#</a> <code>stop</code> method</h3><p>If the method returns <code>True</code>, the inferior will be stopped at the location of the breakpoint, otherwise the inferior will continue.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyBreakpoint</span> <span class="token punctuation">(</span>gdb<span class="token punctuation">.</span>Breakpoint<span class="token punctuation">)</span><span class="token punctuation">:</span>\n      <span class="token keyword">def</span> <span class="token function">stop</span> <span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        inf_val <span class="token operator">=</span> gdb<span class="token punctuation">.</span>parse_and_eval<span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> inf_val <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>\n          <span class="token keyword">return</span> <span class="token boolean">True</span>\n        <span class="token keyword">return</span> <span class="token boolean">False</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="command" tabindex="-1"><a class="header-anchor" href="#command" aria-hidden="true">#</a> Command</h2><p>The following templete can be used to introduce a new command.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ShowAllPci</span><span class="token punctuation">(</span>gdb<span class="token punctuation">.</span>Command<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span> <span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token builtin">super</span><span class="token punctuation">(</span>ShowAllPci<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token string">&quot;show-all-pci&quot;</span><span class="token punctuation">,</span> gdb<span class="token punctuation">.</span>COMMAND_USER<span class="token punctuation">)</span>\n\n    <span class="token keyword">def</span> <span class="token function">invoke</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> from_tty<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>pci_dict<span class="token punctuation">)</span>\n\nShowAllPci<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="signal" tabindex="-1"><a class="header-anchor" href="#signal" aria-hidden="true">#</a> Signal</h2><h2 id="pretty-printer" tabindex="-1"><a class="header-anchor" href="#pretty-printer" aria-hidden="true">#</a> Pretty Printer</h2><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2><blockquote><p>https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html https://www.lse.epita.fr/lse-winter-day-2013/slides/gdb-python.pdf</p></blockquote>',23),t={render:function(n,a){return s}}}}]);