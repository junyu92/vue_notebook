"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[8705],{9010:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-76b97f0c",path:"/kernel/memory/cache.html",title:"Cache",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Introduction",slug:"introduction",children:[]},{level:2,title:"D-cache and I-cache",slug:"d-cache-and-i-cache",children:[]},{level:2,title:"Fundamental structure of a cache",slug:"fundamental-structure-of-a-cache",children:[]},{level:2,title:"Inclusive cache and Exclusive cache",slug:"inclusive-cache-and-exclusive-cache",children:[]},{level:2,title:"Cache policies",slug:"cache-policies",children:[{level:3,title:"Cache allocation policies",slug:"cache-allocation-policies",children:[]},{level:3,title:"Cache update policies",slug:"cache-update-policies",children:[]}]},{level:2,title:"Shareability memory attributes",slug:"shareability-memory-attributes",children:[]},{level:2,title:"Cache Coherency",slug:"cache-coherency",children:[{level:3,title:"MESI protocol",slug:"mesi-protocol",children:[]}]},{level:2,title:"TLB",slug:"tlb",children:[{level:3,title:"ASID and VMID",slug:"asid-and-vmid",children:[]}]},{level:2,title:"Conceptual points",slug:"conceptual-points",children:[]},{level:2,title:"Cache maintenance",slug:"cache-maintenance",children:[{level:3,title:"flush icache",slug:"flush-icache",children:[]},{level:3,title:"flush dcache",slug:"flush-dcache",children:[]}]}],filePathRelative:"kernel/memory/cache.md",git:{updatedTime:1626850534e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:5}]}}},29:(n,a,s)=>{s.r(a),s.d(a,{default:()=>vn});var e=s(6252),t=s(5226);const c=(0,e._)("h1",{id:"cache",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#cache","aria-hidden":"true"},"#"),(0,e.Uk)(" Cache")],-1),l=(0,e._)("h2",{id:"introduction",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),(0,e.Uk)(" Introduction")],-1),o=(0,e._)("p",null,"A cache is a small, fast block of memory that sits between the core and main memory. It holds copies of items in main memory.",-1),i=(0,e._)("p",null,"Accesses to the cache memory occur significantly faster than those to main memory. Whenever the core reads or writes a particular address, it first looks for it in the cache.",-1),r=(0,e._)("p",null,"If it finds the address in the cache, it uses the data in the cache, rather than performing an access to main memory. This significantly increases the potential performance of the system, by reducing the effect of slow external memory access times. It also reduces the power consumption of the system, by avoiding the need to drive external signals.",-1),u=(0,e._)("p",null,"Processors that implement the ARMv8-A Architecture are usually implemented with two or more levels of cache.",-1),_=(0,e._)("p",null,[(0,e.Uk)("This typically means that the processor has small "),(0,e._)("strong",null,"L1 Instruction and Data caches"),(0,e.Uk)(" for "),(0,e._)("strong",null,"each core"),(0,e.Uk)(".")],-1),p=(0,e._)("p",null,[(0,e.Uk)("The Cortex-A53 and Cortex-A57 processors are normally implemented with two or more levels of cache, that is a small L1 Instruction and Data cache and a larger, "),(0,e._)("strong",null,"unified L2 cache"),(0,e.Uk)(", which is "),(0,e._)("strong",null,"shared between multiple cores in a cluster"),(0,e.Uk)(".")],-1),k=(0,e._)("p",null,[(0,e.Uk)("Additionally, there can be an "),(0,e._)("strong",null,"external L3 cache"),(0,e.Uk)(" as an external hardware block, "),(0,e._)("strong",null,"shared between clusters"),(0,e.Uk)(".")],-1),d=(0,e._)("h2",{id:"d-cache-and-i-cache",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#d-cache-and-i-cache","aria-hidden":"true"},"#"),(0,e.Uk)(" D-cache and I-cache")],-1),h=(0,e._)("p",null,"In a von Neumann architecture, a single cache is used for instruction and data (a unified cache). A modified Harvard architecture has separate instruction and data buses and therefore there are two caches, an instruction cache (I-cache) and a data cache (D-cache).",-1),b=(0,e._)("p",null,"In the ARMv8 processors, there are distinct instruction and data L1 caches backed by a unified L2 cache.",-1),m=(0,e._)("h2",{id:"fundamental-structure-of-a-cache",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#fundamental-structure-of-a-cache","aria-hidden":"true"},"#"),(0,e.Uk)(" Fundamental structure of a cache")],-1),U=(0,e._)("p",null,[(0,e._)("img",{src:t,alt:"CacheTerminology"})],-1),f=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("A "),(0,e._)("strong",null,"tag"),(0,e.Uk)(" is the part of a memory address stored within the cache that identifies the main memory addr associated with a line of data")]),(0,e._)("li",null,[(0,e._)("strong",null,"cache line"),(0,e.Uk)(" refers to the smallest loadable unit of a cache, a block of contiguous words from main memory")]),(0,e._)("li",null,[(0,e.Uk)("A "),(0,e._)("strong",null,"way"),(0,e.Uk)(" is a subdivision of a cache, each way being of equal size and indexed in the same fashion.")]),(0,e._)("li",null,[(0,e.Uk)("A "),(0,e._)("strong",null,"set"),(0,e.Uk)(" consists of the cache lines from all ways sharing a particular index")])],-1),g=(0,e._)("h2",{id:"inclusive-cache-and-exclusive-cache",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#inclusive-cache-and-exclusive-cache","aria-hidden":"true"},"#"),(0,e.Uk)(" Inclusive cache and Exclusive cache")],-1),y=(0,e._)("p",null,[(0,e.Uk)("In an "),(0,e._)("strong",null,"inclusive cache model"),(0,e.Uk)(", where the same data can be present in both the L1 and L2 caches.")],-1),w=(0,e._)("p",null,[(0,e.Uk)("In an "),(0,e._)("strong",null,"exclusive cache"),(0,e.Uk)(", data can be present in only one cache and an address cannot be found in both the L1 and L2 caches at the same time.")],-1),v=(0,e._)("h2",{id:"cache-policies",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#cache-policies","aria-hidden":"true"},"#"),(0,e.Uk)(" Cache policies")],-1),x=(0,e._)("p",null,"The cache policies enable us to describe when a line should be allocated to the data cache and what should happen when a store instruction is executed that hits in the data cache.",-1),I=(0,e._)("h3",{id:"cache-allocation-policies",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#cache-allocation-policies","aria-hidden":"true"},"#"),(0,e.Uk)(" Cache allocation policies")],-1),A=(0,e._)("ul",null,[(0,e._)("li",null,"Write allocation"),(0,e._)("li",null,"Read allocation")],-1),S=(0,e._)("h3",{id:"cache-update-policies",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#cache-update-policies","aria-hidden":"true"},"#"),(0,e.Uk)(" Cache update policies")],-1),D=(0,e._)("ul",null,[(0,e._)("li",null,"Write-back"),(0,e._)("li",null,"Write-through")],-1),C=(0,e._)("h2",{id:"shareability-memory-attributes",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#shareability-memory-attributes","aria-hidden":"true"},"#"),(0,e.Uk)(" Shareability memory attributes")],-1),T=(0,e._)("p",null,[(0,e.Uk)("Memory caching can be separately controlled through "),(0,e._)("em",null,"inner"),(0,e.Uk)(" and "),(0,e._)("em",null,"outer"),(0,e.Uk)(" attributes, for multiple levels of cache.")],-1),L=(0,e._)("p",null,[(0,e.Uk)("The shareable attribute is used to define "),(0,e._)("strong",null,"whether a location is shared"),(0,e._)("strong",null,"with multiple cores"),(0,e.Uk)(".")],-1),P=(0,e._)("p",null,[(0,e.Uk)("Marking a region an "),(0,e._)("strong",null,"Non-shareable"),(0,e.Uk)(" means it is only used by thie core, whereas marking it as "),(0,e._)("strong",null,"inner shareable"),(0,e.Uk)(" or "),(0,e._)("strong",null,"outer shareable"),(0,e.Uk)(", or both, means that the location is shared with other observers, for example, a GPU or DMA device might be considered another observer.")],-1),R=(0,e._)("ul",null,[(0,e._)("li",null,"Non-shareable")],-1),E=(0,e._)("p",null,"This represents memory accessible only by a single processor or other agent, so memory accesses never need to be synchronized with other processors. This domain is not typically used in SMP systems.",-1),M=(0,e._)("ul",null,[(0,e._)("li",null,"Inner shareable")],-1),N=(0,e._)("p",null,[(0,e.Uk)("This represents a shareability domain that can be "),(0,e._)("strong",null,"shared by multiple"),(0,e._)("strong",null,"processors"),(0,e.Uk)(", but not necessarily all of the agents in the system.")],-1),V=(0,e._)("p",null,"A system might have multiple Inner Shareable domains. An operation that affacts one Inner Shareable domain does not affect other Inner Shareable domains in the system.",-1),z=(0,e._)("ul",null,[(0,e._)("li",null,"Outer shareable")],-1),W=(0,e._)("p",null,"An outer shareable domain re-orderis shared by multiple agents and can consist of one or more inner shareable domains. An operation that affects an outer shareable domain also implicity affects all inner shareable domains inside it.",-1),B=(0,e._)("p",null,"Howevert, it does not otherwise behave as an inner shareable operation.",-1),F=(0,e._)("ul",null,[(0,e._)("li",null,"Full system")],-1),O=(0,e._)("p",null,"An operation on the full system (SY) affects all observers in the system.",-1),q=(0,e._)("h2",{id:"cache-coherency",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#cache-coherency","aria-hidden":"true"},"#"),(0,e.Uk)(" Cache Coherency")],-1),G=(0,e._)("p",null,"Cache introduce a number of potential problems, mainly because:",-1),H=(0,e._)("ul",null,[(0,e._)("li",null,"Memory accesses can occur at times other than when the programmer would expect them"),(0,e._)("li",null,"A data item can be held in multiple physical locations")],-1),Y=(0,e._)("h3",{id:"mesi-protocol",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#mesi-protocol","aria-hidden":"true"},"#"),(0,e.Uk)(" MESI protocol")],-1),j=(0,e._)("p",null,"Cache line can be marked with one of",-1),K=(0,e._)("ul",null,[(0,e._)("li",null,"M(modified): present only in the current cache, and is dirty."),(0,e._)("li",null,"E(exclusive): present only in the current cache, but is clean."),(0,e._)("li",null,"S(shared): indicates that this cache line may be stored in other caches of the machine and is clean."),(0,e._)("li",null,"I(invalid): indicates that this cache line is invalid.")],-1),J=(0,e._)("h2",{id:"tlb",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#tlb","aria-hidden":"true"},"#"),(0,e.Uk)(" TLB")],-1),Z=(0,e._)("h3",{id:"asid-and-vmid",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#asid-and-vmid","aria-hidden":"true"},"#"),(0,e.Uk)(" ASID and VMID")],-1),Q=(0,e._)("p",null,"To reduce the need for TLB maintanance on context switches, the lookups from some translation regimes can be associated with an ASID, or with an ASID and a VMID.",-1),X=(0,e._)("h4",{id:"asid",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#asid","aria-hidden":"true"},"#"),(0,e.Uk)(" ASID")],-1),$=(0,e._)("p",null,"For stage 1 of a translation regime that can support two VA ranges the VMSA can distinguish between Global pages and Process-specific pages. The ASID identifies pages associated with a specific process and provides a mechanism for changing process-specific tables without having to maintain the TLB structures.",-1),nn=(0,e._)("p",null,[(0,e.Uk)("In Linux, asid has type "),(0,e._)("code",null,"u64"),(0,e.Uk)(". The highest bits[63:asid_bits] is generation number, [asid_bits:0] is asid number which managed by a bitmap.")],-1),an=(0,e._)("p",null,"If bits of bitmap are used up, Linux will increment generation and clear the bitmap.",-1),sn=(0,e._)("p",null,[(0,e.Uk)("For stage 1 translations, each of "),(0,e._)("code",null,"TTBR0_ELx"),(0,e.Uk)(" and "),(0,e._)("code",null,"TTBR1_ELx"),(0,e.Uk)(" has a valid ASID field, and "),(0,e._)("code",null,"TCR_ELx"),(0,e.Uk)(".A1 determines which of these holds the current ASID.")],-1),en=(0,e._)("p",null,"The significant 16 bits are used to store an ASID.",-1),tn=(0,e._)("h5",{id:"init-bitmap",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#init-bitmap","aria-hidden":"true"},"#"),(0,e.Uk)(" init bitmap")],-1),cn=(0,e._)("p",null,"bits of ASID is 8 or 16. Linux uses bitmap to manage ASID allocation.",-1),ln=(0,e._)("div",{class:"language-c ext-c line-numbers-mode"},[(0,e._)("pre",{class:"language-c"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"asids_init"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"void"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        asid_bits "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"get_cpu_asid_bits"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"/*\n         * Expect allocation after rollover to fail if we don't have at least\n         * one more ASID than CPUs. ASID #0 is reserved for init_mm.\n         */"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"WARN_ON"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("NUM_USER_ASIDS "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"<="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"num_possible_cpus"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"atomic64_set"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("asid_generation"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" ASID_FIRST_VERSION"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        asid_map "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"kcalloc"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"BITS_TO_LONGS"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("NUM_USER_ASIDS"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"sizeof"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)("asid_map"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n                           GFP_KERNEL"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"!"),(0,e.Uk)("asid_map"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token function"},"panic"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"Failed to allocate bitmap for %lu ASIDs\\n"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n                      NUM_USER_ASIDS"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n        "),(0,e._)("span",{class:"token function"},"pr_info"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},'"ASID allocator initialised with %lu entries\\n"'),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" NUM_USER_ASIDS"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"early_initcall"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("asids_init"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br")])],-1),on=(0,e._)("h5",{id:"allocate-context-for-task",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#allocate-context-for-task","aria-hidden":"true"},"#"),(0,e.Uk)(" Allocate context for task")],-1),rn=(0,e._)("div",{class:"language-c ext-c line-numbers-mode"},[(0,e._)("pre",{class:"language-c"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(" u64 "),(0,e._)("span",{class:"token function"},"new_context"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"struct"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"mm_struct"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)("mm"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(" u32 cur_idx "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        u64 asid "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"atomic64_read"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("mm"),(0,e._)("span",{class:"token operator"},"->"),(0,e.Uk)("context"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("id"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        u64 generation "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"atomic64_read"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("asid_generation"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("asid "),(0,e._)("span",{class:"token operator"},"!="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                u64 newasid "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" generation "),(0,e._)("span",{class:"token operator"},"|"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("asid "),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"~"),(0,e.Uk)("ASID_MASK"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n                "),(0,e._)("span",{class:"token comment"},"/*\n                 * If our current ASID was active during a rollover, we\n                 * can continue to use it and this was just a false alarm.\n                 */"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"check_update_reserved_asid"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("asid"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" newasid"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" newasid"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n                "),(0,e._)("span",{class:"token comment"},"/*\n                 * We had a valid ASID in a previous life, so try to re-use\n                 * it if possible.\n                 */"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"!"),(0,e._)("span",{class:"token function"},"__test_and_set_bit"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"asid2idx"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("asid"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" asid_map"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" newasid"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n        "),(0,e._)("span",{class:"token comment"},"/*\n         * Allocate a free ASID. If we can't find one, take a note of the\n         * currently active ASIDs and mark the TLBs as requiring flushes.  We\n         * always count from ASID #2 (index 1), as we use ASID #0 when setting\n         * a reserved TTBR0 for the init_mm and we allocate ASIDs in even/odd\n         * pairs.\n         */"),(0,e.Uk)("\n        asid "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"find_next_zero_bit"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("asid_map"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" NUM_USER_ASIDS"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" cur_idx"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("asid "),(0,e._)("span",{class:"token operator"},"!="),(0,e.Uk)(" NUM_USER_ASIDS"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"goto"),(0,e.Uk)(" set_asid"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n        "),(0,e._)("span",{class:"token comment"},"/* We're out of ASIDs, so increment the global generation count */"),(0,e.Uk)("\n        generation "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"atomic64_add_return_relaxed"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("ASID_FIRST_VERSION"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n                                                 "),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("asid_generation"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"flush_context"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n        "),(0,e._)("span",{class:"token comment"},"/* We have more ASIDs than CPUs, so this will always succeed */"),(0,e.Uk)("\n        asid "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"find_next_zero_bit"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("asid_map"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" NUM_USER_ASIDS"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\nset_asid"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"__set_bit"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("asid"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" asid_map"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        cur_idx "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" asid"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"idx2asid"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("asid"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"|"),(0,e.Uk)(" generation"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"42"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"43"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"44"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"45"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"46"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"47"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"48"),(0,e._)("br")])],-1),un=(0,e._)("h5",{id:"switch-asid",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#switch-asid","aria-hidden":"true"},"#"),(0,e.Uk)(" switch asid")],-1),_n=(0,e._)("div",{class:"language-c ext-c line-numbers-mode"},[(0,e._)("pre",{class:"language-c"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"void"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"check_and_switch_context"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"struct"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"mm_struct"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)("mm"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"unsigned"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"int"),(0,e.Uk)(" cpu"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"unsigned"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"long"),(0,e.Uk)(" flags"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        u64 asid"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" old_active_asid"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"system_supports_cnp"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token function"},"cpu_set_reserved_ttbr0"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n        asid "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"atomic64_read"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("mm"),(0,e._)("span",{class:"token operator"},"->"),(0,e.Uk)("context"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("id"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n        "),(0,e._)("span",{class:"token comment"},"/*\n         * The memory ordering here is subtle.\n         * If our active_asids is non-zero and the ASID matches the current\n         * generation, then we update the active_asids entry with a relaxed\n         * cmpxchg. Racing with a concurrent rollover means that either:\n         *\n         * - We get a zero back from the cmpxchg and end up waiting on the\n         *   lock. Taking the lock synchronises with the rollover and so\n         *   we are forced to see the updated generation.\n         *\n         * - We get a valid ASID back from the cmpxchg, which means the\n         *   relaxed xchg in flush_context will treat us as reserved\n         *   because atomic RmWs are totally ordered for a given location.\n         */"),(0,e.Uk)("\n        old_active_asid "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"atomic64_read"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"&"),(0,e._)("span",{class:"token function"},"per_cpu"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("active_asids"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" cpu"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("old_active_asid "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token operator"},"!"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("asid "),(0,e._)("span",{class:"token operator"},"^"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"atomic64_read"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("asid_generation"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},">>"),(0,e.Uk)(" asid_bits"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token function"},"atomic64_cmpxchg_relaxed"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"&"),(0,e._)("span",{class:"token function"},"per_cpu"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("active_asids"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" cpu"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n                                     old_active_asid"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" asid"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"goto"),(0,e.Uk)(" switch_mm_fastpath"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n        "),(0,e._)("span",{class:"token function"},"raw_spin_lock_irqsave"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("cpu_asid_lock"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" flags"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"/* Check that our ASID belongs to the current generation. */"),(0,e.Uk)("\n        asid "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"atomic64_read"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("mm"),(0,e._)("span",{class:"token operator"},"->"),(0,e.Uk)("context"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("id"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\t"),(0,e._)("span",{class:"token comment"},"// the generation of the asid is not matched with global generation,"),(0,e.Uk)("\n\t"),(0,e._)("span",{class:"token comment"},"// we generate a new asid"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("asid "),(0,e._)("span",{class:"token operator"},"^"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"atomic64_read"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("asid_generation"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},">>"),(0,e.Uk)(" asid_bits"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                asid "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"new_context"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("mm"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token function"},"atomic64_set"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("mm"),(0,e._)("span",{class:"token operator"},"->"),(0,e.Uk)("context"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("id"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" asid"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n        "),(0,e._)("span",{class:"token comment"},"// invalidate TLB for current CPU"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"cpumask_test_and_clear_cpu"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("cpu"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("tlb_flush_pending"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token function"},"local_flush_tlb_all"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n        "),(0,e._)("span",{class:"token function"},"atomic64_set"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"&"),(0,e._)("span",{class:"token function"},"per_cpu"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("active_asids"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" cpu"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" asid"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"raw_spin_unlock_irqrestore"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"&"),(0,e.Uk)("cpu_asid_lock"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" flags"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\nswitch_mm_fastpath"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n\n        "),(0,e._)("span",{class:"token function"},"arm64_apply_bp_hardening"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n        "),(0,e._)("span",{class:"token comment"},"/*\n         * Defer TTBR0_EL1 setting for user threads to uaccess_enable() when\n         * emulating PAN.\n         */"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"!"),(0,e._)("span",{class:"token function"},"system_uses_ttbr0_pan"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token function"},"cpu_switch_mm"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("mm"),(0,e._)("span",{class:"token operator"},"->"),(0,e.Uk)("pgd"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" mm"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"42"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"43"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"44"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"45"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"46"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"47"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"48"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"49"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"50"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"51"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"52"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"53"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"54"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"55"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"56"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"57"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"58"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"59"),(0,e._)("br")])],-1),pn=(0,e._)("h4",{id:"vmid",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#vmid","aria-hidden":"true"},"#"),(0,e.Uk)(" VMID")],-1),kn=(0,e._)("p",null,"When EL2 is enabled, the VMID identifies the current virtual machine, with its own independent ASID space.",-1),dn=(0,e._)("h2",{id:"conceptual-points",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#conceptual-points","aria-hidden":"true"},"#"),(0,e.Uk)(" Conceptual points")],-1),hn=(0,e._)("ul",null,[(0,e._)("li",null,"Point of Unification (PoU)"),(0,e._)("li",null,"Point of Coherency (PoC)"),(0,e._)("li",null,"Point of Persistence (PoP)"),(0,e._)("li",null,"Point of Persistence (PoDP)")],-1),bn=(0,e._)("h2",{id:"cache-maintenance",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#cache-maintenance","aria-hidden":"true"},"#"),(0,e.Uk)(" Cache maintenance")],-1),mn=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,"Clean: causes the contents of the cache line to be writtern back to memory, but only if the cache line is 'dirty'")]),(0,e._)("li",null,[(0,e._)("p",null,"invalidate: simply marks a cache line as 'invalid', meaning you won't hit upon")]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("Cache clean by virtual address, "),(0,e._)("code",null,"DC CVAC"),(0,e.Uk)(", "),(0,e._)("code",null,"DC CVAP"),(0,e.Uk)(", and "),(0,e._)("code",null,"DC CVAU")])]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("Cache invalidate by virtual address, "),(0,e._)("code",null,"DC IVAC")])]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("Cache clean and invalidate by virtual address, "),(0,e._)("code",null,"DC CIVAC")])])],-1),Un=(0,e._)("h3",{id:"flush-icache",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#flush-icache","aria-hidden":"true"},"#"),(0,e.Uk)(" flush icache")],-1),fn=(0,e._)("p",null,[(0,e._)("code",null,"__flush_icache_range"),(0,e.Uk)(" and "),(0,e._)("code",null,"__flush_cache_user_range"),(0,e.Uk)(" are used to flush icache.")],-1),gn=(0,e._)("h3",{id:"flush-dcache",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#flush-dcache","aria-hidden":"true"},"#"),(0,e.Uk)(" flush dcache")],-1),yn=(0,e._)("p",null,[(0,e._)("code",null,"__flush_dcache_area"),(0,e.Uk)(" clean and invalidate cache (kaddr, size).")],-1),wn=(0,e._)("div",{class:"language-c ext-c line-numbers-mode"},[(0,e._)("pre",{class:"language-c"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"/*\n *      __flush_dcache_area(kaddr, size)\n *\n *      Ensure that any D-cache lines for the interval [kaddr, kaddr+size)\n *      are cleaned and invalidated to the PoC.\n *\n *      - kaddr   - kernel address\n *      - size    - size in question\n */"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"ENTRY"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("__flush_dcache_area"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        dcache_by_line_op civac"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" sy"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" x0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" x1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" x2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" x3\n        ret\n"),(0,e._)("span",{class:"token function"},"ENDPIPROC"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("__flush_dcache_area"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br")])],-1),vn={render:function(n,a){return(0,e.wg)(),(0,e.iD)(e.HY,null,[c,l,o,i,r,u,_,p,k,d,h,b,m,U,f,g,y,w,v,x,I,A,S,D,C,T,L,P,R,E,M,N,V,z,W,B,F,O,q,G,H,Y,j,K,J,Z,Q,X,$,nn,an,sn,en,tn,cn,ln,on,rn,un,_n,pn,kn,dn,hn,bn,mn,Un,fn,gn,yn,wn],64)}}},5226:(n,a,s)=>{n.exports=s.p+"assets/img/cache_terminology.97d248cb.png"}}]);