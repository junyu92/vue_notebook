"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[3894],{4553:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-1bd74074",path:"/kernel/trace/spe.html",title:"Statistical Profiling Extension",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Registers",slug:"registers",children:[]},{level:2,title:"Initialization",slug:"initialization",children:[]},{level:2,title:"Interrupt handler",slug:"interrupt-handler",children:[]},{level:2,title:"start",slug:"start",children:[]},{level:2,title:"stop",slug:"stop",children:[]}],filePathRelative:"kernel/trace/spe.md",git:{updatedTime:1626850534e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:1}]}}},9176:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="statistical-profiling-extension" tabindex="-1"><a class="header-anchor" href="#statistical-profiling-extension" aria-hidden="true">#</a> Statistical Profiling Extension</h1><p>ARMv8.2 supports an optional extension, Statistical Profiling, providing a statistical view of the performance characteristics of executed instructions, which can be used by software writers to optimize their code for better performance.</p><p>At a high level, SPE behavior consists of:</p><ul><li>Selection of the micro-operation to be profiled</li><li>Marking the selected micro-operation throughout its lifetime in the core, indicating within the various units that it is to be profiled</li><li>Storing data about the profiled micro-operation in internal registers during its lifetime in the core</li><li>Following retire/abort/flush of the profiled instruction, recording the profile data to memory</li></ul><p>Profiles are collected periodically, with the selection of a micro-operation to be profiled being driven by a simple down-counter which counts the number of speculative micro-operations dispatched, decremented once for each micro-operation.</p><p><strong>When the counter reaches zero</strong>, a micro-operation is identified as being sampled and is profiled throughout its lifetime in the microarchitecture.</p><h2 id="registers" tabindex="-1"><a class="header-anchor" href="#registers" aria-hidden="true">#</a> Registers</h2><table><thead><tr><th>Registers</th><th>Info</th></tr></thead><tbody><tr><td>PMSCR_EL1</td><td>Statistical Profiling Control Register EL1</td></tr><tr><td>PMSCR_EL2</td><td>Statistical Profiling Control Register EL2</td></tr><tr><td>PMSCR_EL12</td><td>Alias of the PMSCR_EL1 register, available in EL2</td></tr><tr><td>PMSICR_EL1</td><td>Sampling Interval Counter Register</td></tr><tr><td>PMSIRR_EL1</td><td>Sampling Interval Reload Register</td></tr><tr><td>PMSEVFR_EL1</td><td>Sampling Event Filter Register</td></tr><tr><td>PMSLATFR_EL1</td><td>Sampling Latency Filter Registe</td></tr><tr><td>PMBPTR_EL1</td><td>Profiling Buffer Write Pointer Register</td></tr><tr><td>PMBLIMITR_EL1</td><td>Profiling Buffer Limit Address Register</td></tr><tr><td>PMBSR_EL1</td><td>Profiling Buffer Status/syndrome Register</td></tr><tr><td>PMSFCR_EL1</td><td>Sampling Filter Control Register</td></tr><tr><td>PMBIDR_EL1</td><td>Profiling Buffer ID Register</td></tr><tr><td>PMSIDR_EL1</td><td>Sampling Profiling ID Register</td></tr></tbody></table><h2 id="initialization" tabindex="-1"><a class="header-anchor" href="#initialization" aria-hidden="true">#</a> Initialization</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">arm_spe_pmu_device_probe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">platform_device</span> <span class="token operator">*</span>pdev<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">int</span> ret<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">arm_spe_pmu</span> <span class="token operator">*</span>spe_pmu<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev <span class="token operator">=</span> <span class="token operator">&amp;</span>pdev<span class="token operator">-&gt;</span>dev<span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * If kernelspace is unmapped when running at EL0, then the SPE\n         * buffer will fault and prematurely terminate the AUX session.\n         */</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">arm64_kernel_unmapped_at_el0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">dev_warn_once</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> <span class="token string">&quot;profiling buffer inaccessible. Try passing \\&quot;kpti=off\\&quot; on the kernel command line\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        spe_pmu <span class="token operator">=</span> <span class="token function">devm_kzalloc</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>spe_pmu<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>spe_pmu<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">dev_err</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> <span class="token string">&quot;failed to allocate spe_pmu\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        spe_pmu<span class="token operator">-&gt;</span>handle <span class="token operator">=</span> <span class="token function">alloc_percpu</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>spe_pmu<span class="token operator">-&gt;</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>spe_pmu<span class="token operator">-&gt;</span>handle<span class="token punctuation">)</span>\n                <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>\n\n        spe_pmu<span class="token operator">-&gt;</span>pdev <span class="token operator">=</span> pdev<span class="token punctuation">;</span>\n        <span class="token function">platform_set_drvdata</span><span class="token punctuation">(</span>pdev<span class="token punctuation">,</span> spe_pmu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        ret <span class="token operator">=</span> <span class="token function">arm_spe_pmu_irq_probe</span><span class="token punctuation">(</span>spe_pmu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>\n                <span class="token keyword">goto</span> out_free_handle<span class="token punctuation">;</span>\n\n        ret <span class="token operator">=</span> <span class="token function">arm_spe_pmu_dev_init</span><span class="token punctuation">(</span>spe_pmu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>\n                <span class="token keyword">goto</span> out_free_handle<span class="token punctuation">;</span>\n\n        ret <span class="token operator">=</span> <span class="token function">arm_spe_pmu_perf_init</span><span class="token punctuation">(</span>spe_pmu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>\n                <span class="token keyword">goto</span> out_teardown_dev<span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n\nout_teardown_dev<span class="token operator">:</span>\n        <span class="token function">arm_spe_pmu_dev_teardown</span><span class="token punctuation">(</span>spe_pmu<span class="token punctuation">)</span><span class="token punctuation">;</span>\nout_free_handle<span class="token operator">:</span>\n        <span class="token function">free_percpu</span><span class="token punctuation">(</span>spe_pmu<span class="token operator">-&gt;</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">arm_spe_pmu_dev_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">arm_spe_pmu</span> <span class="token operator">*</span>spe_pmu<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">int</span> ret<span class="token punctuation">;</span>\n        <span class="token class-name">cpumask_t</span> <span class="token operator">*</span>mask <span class="token operator">=</span> <span class="token operator">&amp;</span>spe_pmu<span class="token operator">-&gt;</span>supported_cpus<span class="token punctuation">;</span>\n\n        <span class="token comment">/* Make sure we probe the hardware on a relevant CPU */</span>\n        ret <span class="token operator">=</span> <span class="token function">smp_call_function_any</span><span class="token punctuation">(</span>mask<span class="token punctuation">,</span>  __arm_spe_pmu_dev_probe<span class="token punctuation">,</span> spe_pmu<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>spe_pmu<span class="token operator">-&gt;</span>features <span class="token operator">&amp;</span> SPE_PMU_FEAT_DEV_PROBED<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span> <span class="token operator">-</span>ENXIO<span class="token punctuation">;</span>\n\n        <span class="token comment">/* Request our PPIs (note that the IRQ is still disabled) */</span>\n        ret <span class="token operator">=</span> <span class="token function">request_percpu_irq</span><span class="token punctuation">(</span>spe_pmu<span class="token operator">-&gt;</span>irq<span class="token punctuation">,</span> arm_spe_pmu_irq_handler<span class="token punctuation">,</span> DRVNAME<span class="token punctuation">,</span>\n                                 spe_pmu<span class="token operator">-&gt;</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>\n                <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * Register our hotplug notifier now so we don&#39;t miss any events.\n         * This will enable the IRQ for any supported CPUs that are already\n         * up.\n         */</span>\n        ret <span class="token operator">=</span> <span class="token function">cpuhp_state_add_instance</span><span class="token punctuation">(</span>arm_spe_pmu_online<span class="token punctuation">,</span>\n                                       <span class="token operator">&amp;</span>spe_pmu<span class="token operator">-&gt;</span>hotplug_node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>\n                <span class="token function">free_percpu_irq</span><span class="token punctuation">(</span>spe_pmu<span class="token operator">-&gt;</span>irq<span class="token punctuation">,</span> spe_pmu<span class="token operator">-&gt;</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="interrupt-handler" tabindex="-1"><a class="header-anchor" href="#interrupt-handler" aria-hidden="true">#</a> Interrupt handler</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">irqreturn_t</span> <span class="token function">arm_spe_pmu_irq_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> irq<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">struct</span> <span class="token class-name">perf_output_handle</span> <span class="token operator">*</span>handle <span class="token operator">=</span> dev<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">perf_event</span> <span class="token operator">*</span>event <span class="token operator">=</span> handle<span class="token operator">-&gt;</span>event<span class="token punctuation">;</span>\n        <span class="token keyword">enum</span> <span class="token class-name">arm_spe_pmu_buf_fault_action</span> act<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">perf_get_aux</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span> IRQ_NONE<span class="token punctuation">;</span>\n\n        act <span class="token operator">=</span> <span class="token function">arm_spe_pmu_buf_get_fault_act</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>act <span class="token operator">==</span> SPE_PMU_BUF_FAULT_ACT_SPURIOUS<span class="token punctuation">)</span>\n                <span class="token keyword">return</span> IRQ_NONE<span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * Ensure perf callbacks have completed, which may disable the\n         * profiling buffer in response to a TRUNCATION flag.\n         */</span>\n        <span class="token function">irq_work_run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">switch</span> <span class="token punctuation">(</span>act<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> SPE_PMU_BUF_FAULT_ACT_FATAL<span class="token operator">:</span>\n                <span class="token comment">/*\n                 * If a fatal exception occurred then leaving the profiling\n                 * buffer enabled is a recipe waiting to happen. Since\n                 * fatal faults don&#39;t always imply truncation, make sure\n                 * that the profiling buffer is disabled explicitly before\n                 * clearing the syndrome register.\n                 */</span>\n                <span class="token function">arm_spe_pmu_disable_and_drain_local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> SPE_PMU_BUF_FAULT_ACT_OK<span class="token operator">:</span>\n                <span class="token comment">/*\n                 * We handled the fault (the buffer was full), so resume\n                 * profiling as long as we didn&#39;t detect truncation.\n                 * PMBPTR might be misaligned, but we&#39;ll burn that bridge\n                 * when we get to it.\n                 */</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>handle<span class="token operator">-&gt;</span>aux_flags <span class="token operator">&amp;</span> PERF_AUX_FLAG_TRUNCATED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token function">arm_spe_perf_aux_output_begin</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token function">isb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> SPE_PMU_BUF_FAULT_ACT_SPURIOUS<span class="token operator">:</span>\n                <span class="token comment">/* We&#39;ve seen you before, but GCC has the memory of a sieve. */</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">/* The buffer pointers are now sane, so resume profiling. */</span>\n        <span class="token function">write_sysreg_s</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SYS_PMBSR_EL1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> IRQ_HANDLED<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h2 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arm_spe_pmu_start</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">perf_event</span> <span class="token operator">*</span>event<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        u64 reg<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">arm_spe_pmu</span> <span class="token operator">*</span>spe_pmu <span class="token operator">=</span> <span class="token function">to_spe_pmu</span><span class="token punctuation">(</span>event<span class="token operator">-&gt;</span>pmu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">hw_perf_event</span> <span class="token operator">*</span>hwc <span class="token operator">=</span> <span class="token operator">&amp;</span>event<span class="token operator">-&gt;</span>hw<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">perf_output_handle</span> <span class="token operator">*</span>handle <span class="token operator">=</span> <span class="token function">this_cpu_ptr</span><span class="token punctuation">(</span>spe_pmu<span class="token operator">-&gt;</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        hwc<span class="token operator">-&gt;</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token function">arm_spe_perf_aux_output_begin</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>hwc<span class="token operator">-&gt;</span>state<span class="token punctuation">)</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n        reg <span class="token operator">=</span> <span class="token function">arm_spe_event_to_pmsfcr</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">write_sysreg_s</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> SYS_PMSFCR_EL1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        reg <span class="token operator">=</span> <span class="token function">arm_spe_event_to_pmsevfr</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">write_sysreg_s</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> SYS_PMSEVFR_EL1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        reg <span class="token operator">=</span> <span class="token function">arm_spe_event_to_pmslatfr</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">write_sysreg_s</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> SYS_PMSLATFR_EL1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> PERF_EF_RELOAD<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                reg <span class="token operator">=</span> <span class="token function">arm_spe_event_to_pmsirr</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">write_sysreg_s</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> SYS_PMSIRR_EL1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">isb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                reg <span class="token operator">=</span> <span class="token function">local64_read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hwc<span class="token operator">-&gt;</span>period_left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">write_sysreg_s</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> SYS_PMSICR_EL1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        reg <span class="token operator">=</span> <span class="token function">arm_spe_event_to_pmscr</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">isb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">write_sysreg_s</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> SYS_PMSCR_EL1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="stop" tabindex="-1"><a class="header-anchor" href="#stop" aria-hidden="true">#</a> stop</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arm_spe_pmu_stop</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">perf_event</span> <span class="token operator">*</span>event<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">struct</span> <span class="token class-name">arm_spe_pmu</span> <span class="token operator">*</span>spe_pmu <span class="token operator">=</span> <span class="token function">to_spe_pmu</span><span class="token punctuation">(</span>event<span class="token operator">-&gt;</span>pmu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">hw_perf_event</span> <span class="token operator">*</span>hwc <span class="token operator">=</span> <span class="token operator">&amp;</span>event<span class="token operator">-&gt;</span>hw<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">perf_output_handle</span> <span class="token operator">*</span>handle <span class="token operator">=</span> <span class="token function">this_cpu_ptr</span><span class="token punctuation">(</span>spe_pmu<span class="token operator">-&gt;</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/* If we&#39;re already stopped, then nothing to do */</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>hwc<span class="token operator">-&gt;</span>state <span class="token operator">&amp;</span> PERF_HES_STOPPED<span class="token punctuation">)</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/* Stop all trace generation */</span>\n        <span class="token function">arm_spe_pmu_disable_and_drain_local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> PERF_EF_UPDATE<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">/*\n                 * If there&#39;s a fault pending then ensure we contain it\n                 * to this buffer, since we might be on the context-switch\n                 * path.\n                 */</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">perf_get_aux</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">enum</span> <span class="token class-name">arm_spe_pmu_buf_fault_action</span> act<span class="token punctuation">;</span>\n\n                        act <span class="token operator">=</span> <span class="token function">arm_spe_pmu_buf_get_fault_act</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token keyword">if</span> <span class="token punctuation">(</span>act <span class="token operator">==</span> SPE_PMU_BUF_FAULT_ACT_SPURIOUS<span class="token punctuation">)</span>\n                                <span class="token function">arm_spe_perf_aux_output_end</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token keyword">else</span>\n                                <span class="token function">write_sysreg_s</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SYS_PMBSR_EL1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token comment">/*\n                 * This may also contain ECOUNT, but nobody else should\n                 * be looking at period_left, since we forbid frequency\n                 * based sampling.\n                 */</span>\n                <span class="token function">local64_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hwc<span class="token operator">-&gt;</span>period_left<span class="token punctuation">,</span> <span class="token function">read_sysreg_s</span><span class="token punctuation">(</span>SYS_PMSICR_EL1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                hwc<span class="token operator">-&gt;</span>state <span class="token operator">|=</span> PERF_HES_UPTODATE<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        hwc<span class="token operator">-&gt;</span>state <span class="token operator">|=</span> PERF_HES_STOPPED<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div>',17),e={render:function(n,s){return p}}}}]);