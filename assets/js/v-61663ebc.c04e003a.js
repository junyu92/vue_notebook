"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[455],{7912:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-61663ebc",path:"/kernel/misc/uefi.html",title:"UEFI",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"UEFI stub",slug:"uefi-stub",children:[]},{level:2,title:"efi_system_table",slug:"efi-system-table",children:[]},{level:2,title:"UEFI kernel support on ARM",slug:"uefi-kernel-support-on-arm",children:[{level:3,title:"efi_entry",slug:"efi-entry",children:[]},{level:3,title:"efi_init",slug:"efi-init",children:[]}]}],filePathRelative:"kernel/misc/uefi.md",git:{updatedTime:1627543229e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:1}]}}},7716:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="uefi" tabindex="-1"><a class="header-anchor" href="#uefi" aria-hidden="true">#</a> UEFI</h1><p>The Unified Extensible Firmware Interface (UEFI) is a publicly available specification that defines a software interface between an operating system and platform firmware.</p><p>Booting on a platform with firmware compliant with the UEFI specification makes it possible for the kernel to support additional features:</p><ul><li>UEFI Runtime Services</li><li>Retrieving various configuration information throught the standardised interface of UEFI configuration tables. (ACPI, SMBIOS, ...)</li></ul><p>To enable UEFI support,</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>CONFIG_EFI=y\nCONFIG_EFIVAR_FS=y or m\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>should be set.</p><h2 id="uefi-stub" tabindex="-1"><a class="header-anchor" href="#uefi-stub" aria-hidden="true">#</a> UEFI stub</h2><p>The &quot;stub&quot; is a feature that extends the Image/zImage into a valid UEFI PE/COFF executable, including a loader application that makes it possible to load the kernel directly from the UEFI shell, boot menu, or one of the lightweight bootloaders like Gummiboot or rEFInd.</p><h2 id="efi-system-table" tabindex="-1"><a class="header-anchor" href="#efi-system-table" aria-hidden="true">#</a> efi_system_table</h2><p>The <code>EFI_SYSTEM_TABLE</code> is the key to accessing most of an EFI environment&#39;s features. This data structure includes a number of pointers, some of which point to additional data structures that provide access to EFI system calls</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n        <span class="token class-name">efi_table_hdr_t</span> hdr<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> fw_vendor<span class="token punctuation">;</span>        <span class="token comment">/* physical addr of CHAR16 vendor string */</span>\n        u32 fw_revision<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> con_in_handle<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> con_in<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> con_out_handle<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> con_out<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> stderr_handle<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token constant">stderr</span><span class="token punctuation">;</span>\n        <span class="token class-name">efi_runtime_services_t</span> <span class="token operator">*</span>runtime<span class="token punctuation">;</span>\n        <span class="token class-name">efi_boot_services_t</span> <span class="token operator">*</span>boottime<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> nr_tables<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> tables<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token class-name">efi_system_table_t</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="uefi-kernel-support-on-arm" tabindex="-1"><a class="header-anchor" href="#uefi-kernel-support-on-arm" aria-hidden="true">#</a> UEFI kernel support on ARM</h2><p>When booting in UEFI mode, the stub deletes any memory nodes from a provided DT. Instead, the kernel reads the UEFI memory map.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>        <span class="token comment">/*\n         * We arrive here from the EFI boot manager with:\n         *\n         *    * CPU in little-endian mode\n         *    * MMU on with identity-mapped RAM\n         *    * Icache and Dcache on\n         *\n         * We will most likely be running from some place other than where\n         * we want to be. The kernel image wants to be placed at TEXT_OFFSET\n         * from start of RAM.\n         */</span>\n<span class="token function">ENTRY</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span>\n        <span class="token comment">/*\n         * Create a stack frame to save FP/LR with extra space\n         * for image_addr variable passed to efi_entry().\n         */</span>\n        stp     x29<span class="token punctuation">,</span> x30<span class="token punctuation">,</span> <span class="token punctuation">[</span>sp<span class="token punctuation">,</span> #<span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">!</span>\n        mov     x29<span class="token punctuation">,</span> sp\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>call <code>efi_entry</code>, x0 is <code>handle</code>, x1 is <code>sys_table</code> and x2 is the address of <code>_text</code> which is image addr.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>        <span class="token comment">/*\n         * Call efi_entry to do the real work.\n         * x0 and x1 are already set up by firmware. Current runtime\n         * address of image is calculated and passed via *image_addr.\n         *\n         * unsigned long efi_entry(void *handle,\n         *                         efi_system_table_t *sys_table,\n         *                         unsigned long *image_addr) ;\n         */</span>\n        adr_l   x8<span class="token punctuation">,</span> _text\n        add     x2<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> <span class="token number">16</span>\n        str     x8<span class="token punctuation">,</span> <span class="token punctuation">[</span>x2<span class="token punctuation">]</span>\n        bl      efi_entry\n        cmn     x0<span class="token punctuation">,</span> #<span class="token number">1</span>\n        b<span class="token punctuation">.</span>eq    efi_load_fail\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Now <code>x0</code> is the return value of <code>efi_entry</code> which is the address of new fdt.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>        <span class="token comment">/*\n         * efi_entry() will have copied the kernel image if necessary and we\n         * return here with device tree address in x0 and the kernel entry\n         * point stored at *image_addr. Save those values in registers which\n         * are callee preserved.\n         */</span>\n        mov     x20<span class="token punctuation">,</span> x0         <span class="token comment">// DTB address</span>\n        ldr     x0<span class="token punctuation">,</span> <span class="token punctuation">[</span>sp<span class="token punctuation">,</span> #<span class="token number">16</span><span class="token punctuation">]</span>   <span class="token comment">// relocated _text address</span>\n        ldr     w21<span class="token punctuation">,</span> <span class="token operator">=</span>stext_offset\n        add     x21<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> x21\n\n        <span class="token comment">/*\n         * Calculate size of the kernel Image (same for original and copy).\n         */</span>\n        adr_l   x1<span class="token punctuation">,</span> _text\n        adr_l   x2<span class="token punctuation">,</span> _edata\n        sub     x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x1\n\n        <span class="token comment">/*\n         * Flush the copied Image to the PoC, and ensure it is not shadowed by\n         * stale icache entries from before relocation.\n         */</span>\n        bl      __flush_dcache_area\n        ic      ialluis\n\n        <span class="token comment">/*\n         * Ensure that the rest of this function (in the original Image) is\n         * visible when the caches are disabled. The I-cache can&#39;t have stale\n         * entries for the VA range of the current image, so no maintenance is\n         * necessary.\n         */</span>\n        adr     x0<span class="token punctuation">,</span> entry\n        adr     x1<span class="token punctuation">,</span> entry_end\n        sub     x1<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x0\n        bl      __flush_dcache_area\n\n        <span class="token comment">/* Turn off Dcache and MMU */</span>\n        mrs     x0<span class="token punctuation">,</span> CurrentEL\n        cmp     x0<span class="token punctuation">,</span> #CurrentEL_EL2\n        b<span class="token punctuation">.</span>ne    <span class="token number">1f</span>\n        mrs     x0<span class="token punctuation">,</span> sctlr_el2\n        bic     x0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> #<span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token comment">// clear SCTLR.M</span>\n        bic     x0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> #<span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token comment">// clear SCTLR.C</span>\n        pre_disable_mmu_workaround\n        msr     sctlr_el2<span class="token punctuation">,</span> x0\n        isb\n        b       <span class="token number">2f</span>\n<span class="token number">1</span><span class="token operator">:</span>\n        mrs     x0<span class="token punctuation">,</span> sctlr_el1\n        bic     x0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> #<span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token comment">// clear SCTLR.M</span>\n        bic     x0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> #<span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token comment">// clear SCTLR.C</span>\n        pre_disable_mmu_workaround\n        msr     sctlr_el1<span class="token punctuation">,</span> x0\n        isb\n<span class="token number">2</span><span class="token operator">:</span>\n        <span class="token comment">/* Jump to kernel entry point */</span>\n        mov     x0<span class="token punctuation">,</span> x20\n        mov     x1<span class="token punctuation">,</span> xzr\n        mov     x2<span class="token punctuation">,</span> xzr\n        mov     x3<span class="token punctuation">,</span> xzr\n        br      x21\n\nefi_load_fail<span class="token operator">:</span>\n        mov     x0<span class="token punctuation">,</span> #EFI_LOAD_ERROR\n        ldp     x29<span class="token punctuation">,</span> x30<span class="token punctuation">,</span> <span class="token punctuation">[</span>sp<span class="token punctuation">]</span><span class="token punctuation">,</span> #<span class="token number">32</span>\n        ret\n\nentry_end<span class="token operator">:</span>\n<span class="token function">ENDPROC</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br></div></div><h3 id="efi-entry" tabindex="-1"><a class="header-anchor" href="#efi-entry" aria-hidden="true">#</a> efi_entry</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/*\n * EFI entry point for the arm/arm64 EFI stubs.  This is the entrypoint\n * that is described in the PE/COFF header.  Most of the code is the same\n * for both archictectures, with the arch-specific code provided in the\n * handle_kernel_image() function.\n */</span>\n<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">efi_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>handle<span class="token punctuation">,</span> <span class="token class-name">efi_system_table_t</span> <span class="token operator">*</span>sys_table<span class="token punctuation">,</span>\n                               <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>image_addr<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token class-name">efi_loaded_image_t</span> <span class="token operator">*</span>image<span class="token punctuation">;</span>\n        <span class="token class-name">efi_status_t</span> status<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> image_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> dram_base<span class="token punctuation">;</span>\n        <span class="token comment">/* addr/point and size pairs for memory management*/</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> initrd_addr<span class="token punctuation">;</span>\n        u64 initrd_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> fdt_addr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">/* Original DTB */</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> fdt_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">char</span> <span class="token operator">*</span>cmdline_ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> cmdline_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> new_fdt_addr<span class="token punctuation">;</span>\n        <span class="token class-name">efi_guid_t</span> loaded_image_proto <span class="token operator">=</span> LOADED_IMAGE_PROTOCOL_GUID<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> reserve_addr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> reserve_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">enum</span> <span class="token class-name">efi_secureboot_mode</span> secure_boot<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">screen_info</span> <span class="token operator">*</span>si<span class="token punctuation">;</span>\n\n        <span class="token comment">/* Check if we were booted by the EFI firmware */</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>sys_table<span class="token operator">-&gt;</span>hdr<span class="token punctuation">.</span>signature <span class="token operator">!=</span> EFI_SYSTEM_TABLE_SIGNATURE<span class="token punctuation">)</span>\n                <span class="token keyword">goto</span> fail<span class="token punctuation">;</span>\n\n        status <span class="token operator">=</span> <span class="token function">check_platform_features</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> EFI_SUCCESS<span class="token punctuation">)</span>\n                <span class="token keyword">goto</span> fail<span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * Get a handle to the loaded image protocol.  This is used to get\n         * information about the running image, such as size and the command\n         * line.\n         */</span>\n        status <span class="token operator">=</span> sys_table<span class="token operator">-&gt;</span>boottime<span class="token operator">-&gt;</span><span class="token function">handle_protocol</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span>\n                                        <span class="token operator">&amp;</span>loaded_image_proto<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> EFI_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">pr_efi_err</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> <span class="token string">&quot;Failed to get loaded image protocol\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">goto</span> fail<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        dram_base <span class="token operator">=</span> <span class="token function">get_dram_base</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>dram_base <span class="token operator">==</span> EFI_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">pr_efi_err</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> <span class="token string">&quot;Failed to find DRAM base\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">goto</span> fail<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">/*\n         * Get the command line from EFI, using the LOADED_IMAGE\n         * protocol. We are going to copy the command line into the\n         * device tree, so this can be allocated anywhere.\n         */</span>\n        cmdline_ptr <span class="token operator">=</span> <span class="token function">efi_convert_cmdline</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> image<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cmdline_size<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cmdline_ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">pr_efi_err</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> <span class="token string">&quot;getting command line via LOADED_IMAGE_PROTOCOL\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">goto</span> fail<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_CMDLINE_EXTEND<span class="token punctuation">)</span> <span class="token operator">||</span>\n            <span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_CMDLINE_FORCE<span class="token punctuation">)</span> <span class="token operator">||</span>\n            cmdline_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n                <span class="token function">efi_parse_options</span><span class="token punctuation">(</span>CONFIG_CMDLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_CMDLINE_FORCE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> cmdline_size <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n                <span class="token function">efi_parse_options</span><span class="token punctuation">(</span>cmdline_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">pr_efi</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> <span class="token string">&quot;Booting Linux Kernel...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        si <span class="token operator">=</span> <span class="token function">setup_graphics</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        status <span class="token operator">=</span> <span class="token function">handle_kernel_image</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> image_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>image_size<span class="token punctuation">,</span>\n                                     <span class="token operator">&amp;</span>reserve_addr<span class="token punctuation">,</span>\n                                     <span class="token operator">&amp;</span>reserve_size<span class="token punctuation">,</span>\n                                     dram_base<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> EFI_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">pr_efi_err</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> <span class="token string">&quot;Failed to relocate kernel\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">goto</span> fail_free_cmdline<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">/* Ask the firmware to clear memory on unclean shutdown */</span>\n        <span class="token function">efi_enable_reset_attack_mitigation</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        secure_boot <span class="token operator">=</span> <span class="token function">efi_get_secureboot</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * Unauthenticated device tree data is a security hazard, so ignore\n         * &#39;dtb=&#39; unless UEFI Secure Boot is disabled.  We assume that secure\n         * boot is enabled if we can&#39;t determine its state.\n         */</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_EFI_ARMSTUB_DTB_LOADER<span class="token punctuation">)</span> <span class="token operator">||</span>\n             secure_boot <span class="token operator">!=</span> efi_secureboot_mode_disabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>cmdline_ptr<span class="token punctuation">,</span> <span class="token string">&quot;dtb=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                        <span class="token function">pr_efi</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> <span class="token string">&quot;Ignoring DTB from command line.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                status <span class="token operator">=</span> <span class="token function">handle_cmdline_files</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> image<span class="token punctuation">,</span> cmdline_ptr<span class="token punctuation">,</span>\n                                              <span class="token string">&quot;dtb=&quot;</span><span class="token punctuation">,</span>\n                                              <span class="token operator">~</span><span class="token number">0UL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fdt_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fdt_size<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> EFI_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token function">pr_efi_err</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> <span class="token string">&quot;Failed to load device tree!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token keyword">goto</span> fail_free_image<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>fdt_addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">pr_efi</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> <span class="token string">&quot;Using DTB from command line\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token comment">/* Look for a device tree configuration table entry. */</span>\n                fdt_addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span><span class="token function">get_fdt</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fdt_size<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>fdt_addr<span class="token punctuation">)</span>\n                        <span class="token function">pr_efi</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> <span class="token string">&quot;Using DTB from configuration table\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fdt_addr<span class="token punctuation">)</span>\n                <span class="token function">pr_efi</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> <span class="token string">&quot;Generating empty DTB\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        status <span class="token operator">=</span> <span class="token function">handle_cmdline_files</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> image<span class="token punctuation">,</span> cmdline_ptr<span class="token punctuation">,</span> <span class="token string">&quot;initrd=&quot;</span><span class="token punctuation">,</span>\n                                      <span class="token function">efi_get_max_initrd_addr</span><span class="token punctuation">(</span>dram_base<span class="token punctuation">,</span>\n                                                              <span class="token operator">*</span>image_addr<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                                      <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>initrd_addr<span class="token punctuation">,</span>\n                                      <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>initrd_size<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> EFI_SUCCESS<span class="token punctuation">)</span>\n                <span class="token function">pr_efi_err</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> <span class="token string">&quot;Failed initrd from command line!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">efi_random_get_seed</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/* hibernation expects the runtime regions to stay in the same place */</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_HIBERNATION<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">nokaslr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">/*\n                 * Randomize the base of the UEFI runtime services region.\n                 * Preserve the 2 MB alignment of the region by taking a\n                 * shift of 21 bit positions into account when scaling\n                 * the headroom value using a 32-bit random value.\n                 */</span>\n                <span class="token keyword">static</span> <span class="token keyword">const</span> u64 headroom <span class="token operator">=</span> EFI_RT_VIRTUAL_LIMIT <span class="token operator">-</span>\n                                            EFI_RT_VIRTUAL_BASE <span class="token operator">-</span>\n                                            EFI_RT_VIRTUAL_SIZE<span class="token punctuation">;</span>\n                u32 rnd<span class="token punctuation">;</span>\n\n                status <span class="token operator">=</span> <span class="token function">efi_get_random_bytes</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rnd<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                                              <span class="token punctuation">(</span>u8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>rnd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> EFI_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        virtmap_base <span class="token operator">=</span> EFI_RT_VIRTUAL_BASE <span class="token operator">+</span>\n                                       <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>headroom <span class="token operator">&gt;&gt;</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">*</span> rnd<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token function">install_memreserve_table</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        new_fdt_addr <span class="token operator">=</span> fdt_addr<span class="token punctuation">;</span>\n        status <span class="token operator">=</span> <span class="token function">allocate_new_fdt_and_exit_boot</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> handle<span class="token punctuation">,</span>\n                                <span class="token operator">&amp;</span>new_fdt_addr<span class="token punctuation">,</span> <span class="token function">efi_get_max_fdt_addr</span><span class="token punctuation">(</span>dram_base<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                                initrd_addr<span class="token punctuation">,</span> initrd_size<span class="token punctuation">,</span> cmdline_ptr<span class="token punctuation">,</span>\n                                fdt_addr<span class="token punctuation">,</span> fdt_size<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * If all went well, we need to return the FDT address to the\n         * calling function so it can be passed to kernel as part of\n         * the kernel boot protocol.\n         */</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> EFI_SUCCESS<span class="token punctuation">)</span>\n                <span class="token keyword">return</span> new_fdt_addr<span class="token punctuation">;</span>\n\n        <span class="token function">pr_efi_err</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> <span class="token string">&quot;Failed to update FDT and exit boot services\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">efi_free</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> initrd_size<span class="token punctuation">,</span> initrd_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">efi_free</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> fdt_size<span class="token punctuation">,</span> fdt_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nfail_free_image<span class="token operator">:</span>\n        <span class="token function">efi_free</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> image_size<span class="token punctuation">,</span> <span class="token operator">*</span>image_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">efi_free</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> reserve_size<span class="token punctuation">,</span> reserve_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>\nfail_free_cmdline<span class="token operator">:</span>\n        <span class="token function">free_screen_info</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> si<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">efi_free</span><span class="token punctuation">(</span>sys_table<span class="token punctuation">,</span> cmdline_size<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>cmdline_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\nfail<span class="token operator">:</span>\n        <span class="token keyword">return</span> EFI_ERROR<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br></div></div><h3 id="efi-init" tabindex="-1"><a class="header-anchor" href="#efi-init" aria-hidden="true">#</a> efi_init</h3>',22),e={render:function(n,s){return p}}}}]);