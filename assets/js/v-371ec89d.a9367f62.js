"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[4111],{1371:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-371ec89d",path:"/kernel/time/dynamic_timer.html",title:"Dynamic Timer",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Introduction",slug:"introduction",children:[]},{level:2,title:"Timer Initialization",slug:"timer-initialization",children:[]},{level:2,title:"Usage",slug:"usage",children:[]},{level:2,title:"Reference",slug:"reference",children:[]}],filePathRelative:"kernel/time/dynamic_timer.md",git:{updatedTime:1627640859e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:1}]}}},9862:(n,s,a)=>{a.r(s),a.d(s,{default:()=>b});var p=a(6252);const e=(0,p._)("h1",{id:"dynamic-timer",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#dynamic-timer","aria-hidden":"true"},"#"),(0,p.Uk)(" Dynamic Timer")],-1),t={class:"table-of-contents"},o=(0,p.Uk)("Introduction"),c=(0,p.Uk)("Timer Initialization"),l=(0,p.Uk)("Usage"),i=(0,p.Uk)("Reference"),r=(0,p.uE)('<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>After initializing tick broadcast and NO_HZ mode (within <code>tick_init()</code>), <code>init_timers</code> will be invoked.</p><p>In this chapter, we are going to introduce timer.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Sometimes called kernel timers or timers.</p><p>It is often used to delay execution of some function, not hardware timer.</p></div><h2 id="timer-initialization" tabindex="-1"><a class="header-anchor" href="#timer-initialization" aria-hidden="true">#</a> Timer Initialization</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> __init <span class="token function">init_timer_cpus</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">int</span> cpu<span class="token punctuation">;</span>\n\n        <span class="token function">for_each_possible_cpu</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span>\n                <span class="token function">init_timer_cpu</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> __init <span class="token function">init_timers</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token function">init_timer_cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">open_softirq</span><span class="token punctuation">(</span>TIMER_SOFTIRQ<span class="token punctuation">,</span> run_timer_softirq<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>The first function is <code>init_timer_cpus()</code>, it just calls <code>init_timer_cpu</code> for each possible cpu.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">timer_base</span> <span class="token punctuation">{</span>\n        <span class="token class-name">raw_spinlock_t</span>          lock<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">timer_list</span>       <span class="token operator">*</span>running_timer<span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_PREEMPT_RT</span></span>\n        <span class="token class-name">spinlock_t</span>              expiry_lock<span class="token punctuation">;</span>\n        <span class="token class-name">atomic_t</span>                timer_waiters<span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n\t<span class="token comment">// earliest expiration time</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span>           clk<span class="token punctuation">;</span>\n\t<span class="token comment">// next pending time for a next timer interrupt in a case</span>\n\t<span class="token comment">// when a processor goes to sleep and the NO_HZ mode is</span>\n\t<span class="token comment">// enabled in the Linux kernel</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span>           next_expiry<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">int</span>            cpu<span class="token punctuation">;</span>\n        bool                    is_idle<span class="token punctuation">;</span>\n        bool                    must_forward_clk<span class="token punctuation">;</span>\n        <span class="token function">DECLARE_BITMAP</span><span class="token punctuation">(</span>pending_map<span class="token punctuation">,</span> WHEEL_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">hlist_head</span>       vectors<span class="token punctuation">[</span>WHEEL_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> ____cacheline_aligned<span class="token punctuation">;</span>\n\n<span class="token keyword">static</span> <span class="token keyword">void</span> __init <span class="token function">init_timer_cpu</span><span class="token punctuation">(</span><span class="token keyword">int</span> cpu<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">struct</span> <span class="token class-name">timer_base</span> <span class="token operator">*</span>base<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> i<span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_BASES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                base <span class="token operator">=</span> <span class="token function">per_cpu_ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer_bases<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                base<span class="token operator">-&gt;</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>\n                <span class="token function">raw_spin_lock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>base<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                base<span class="token operator">-&gt;</span>clk <span class="token operator">=</span> jiffies<span class="token punctuation">;</span>\n                <span class="token function">timer_base_init_expiry_lock</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p><code>open_softirq(TIMER_SOFTIRQ, run_timer_softirq);</code> registers handler for <code>TIMER_SOFIRQ</code>.</p><p>This will be called after a hardware interrupt happened. The main point of this function is to handle a software dynamic timer.</p><p>The Linux kernel does not do this thing during the hardware timer interrupt handling since it&#39;s time comsuming operation.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/*\n * This function runs timers and the timer-tq in bottom half context.\n */</span>\n<span class="token keyword">static</span> __latent_entropy <span class="token keyword">void</span> <span class="token function">run_timer_softirq</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">softirq_action</span> <span class="token operator">*</span>h<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">struct</span> <span class="token class-name">timer_base</span> <span class="token operator">*</span>base <span class="token operator">=</span> <span class="token function">this_cpu_ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer_bases<span class="token punctuation">[</span>BASE_STD<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">__run_timers</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_NO_HZ_COMMON<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token function">__run_timers</span><span class="token punctuation">(</span><span class="token function">this_cpu_ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer_bases<span class="token punctuation">[</span>BASE_DEF<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>__run_timers</code> runs all expired events for a given processor.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__run_timers</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timer_base</span> <span class="token operator">*</span>base<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">struct</span> <span class="token class-name">hlist_head</span> heads<span class="token punctuation">[</span>LVL_DEPTH<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> levels<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">time_after_eq</span><span class="token punctuation">(</span>jiffies<span class="token punctuation">,</span> base<span class="token operator">-&gt;</span>clk<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n        <span class="token function">timer_base_lock_expiry</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">raw_spin_lock_irq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>base<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * timer_base::must_forward_clk must be cleared before running\n         * timers so that any timer functions that call mod_timer() will\n         * not try to forward the base. Idle tracking / clock forwarding\n         * logic is only used with BASE_STD timers.\n         *\n         * The must_forward_clk flag is cleared unconditionally also for\n         * the deferrable base. The deferrable base is not affected by idle\n         * tracking and never forwarded, so clearing the flag is a NOOP.\n         *\n         * The fact that the deferrable base is never forwarded can cause\n         * large variations in granularity for deferrable timers, but they\n         * can be deferred for long periods due to idle anyway.\n         */</span>\n        base<span class="token operator">-&gt;</span>must_forward_clk <span class="token operator">=</span> false<span class="token punctuation">;</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">time_after_eq</span><span class="token punctuation">(</span>jiffies<span class="token punctuation">,</span> base<span class="token operator">-&gt;</span>clk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n                levels <span class="token operator">=</span> <span class="token function">collect_expired_timers</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> heads<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                base<span class="token operator">-&gt;</span>clk<span class="token operator">++</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">while</span> <span class="token punctuation">(</span>levels<span class="token operator">--</span><span class="token punctuation">)</span>\n                        <span class="token function">expire_timers</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> heads <span class="token operator">+</span> levels<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">raw_spin_unlock_irq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>base<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">timer_base_unlock_expiry</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">expire_timers</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timer_base</span> <span class="token operator">*</span>base<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">hlist_head</span> <span class="token operator">*</span>head<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token comment">/*\n         * This value is required only for tracing. base-&gt;clk was\n         * incremented directly before expire_timers was called. But expiry\n         * is related to the old base-&gt;clk value.\n         */</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> baseclk <span class="token operator">=</span> base<span class="token operator">-&gt;</span>clk <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hlist_empty</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token operator">*</span>timer<span class="token punctuation">;</span>\n                <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                timer <span class="token operator">=</span> <span class="token function">hlist_entry</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>first<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">timer_list</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                base<span class="token operator">-&gt;</span>running_timer <span class="token operator">=</span> timer<span class="token punctuation">;</span>\n                <span class="token function">detach_timer</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                fn <span class="token operator">=</span> timer<span class="token operator">-&gt;</span>function<span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> TIMER_IRQSAFE<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token function">raw_spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>base<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token function">call_timer_fn</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> baseclk<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        base<span class="token operator">-&gt;</span>running_timer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n                        <span class="token function">raw_spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>base<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                        <span class="token function">raw_spin_unlock_irq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>base<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token function">call_timer_fn</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> baseclk<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        base<span class="token operator">-&gt;</span>running_timer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n                        <span class="token function">timer_sync_wait_running</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token function">raw_spin_lock_irq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>base<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br></div></div><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>To use a timer in the Linux kernel, we must define and initialize a variable with type <code>timer_list</code></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DEFINE_TIMER</span><span class="token expression"><span class="token punctuation">(</span>_name<span class="token punctuation">,</span> _function<span class="token punctuation">)</span>                          </span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">timer_list</span> _name <span class="token operator">=</span>                               </span><span class="token punctuation">\\</span>\n                <span class="token expression"><span class="token function">__TIMER_INITIALIZER</span><span class="token punctuation">(</span>_function<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>After initializing a dynamic timer, we can start or stop it with <code>add_timer</code>/<code>del_timer</code>.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>There are many ways to define timer, see</p><p>include/linux/timer.h</p><p>for more details</p></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>',20),u={href:"https://0xax.gitbooks.io/linux-insides/content/Timers/linux-timers-4.html",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("Timers and time management in the Linux kernel. Part 4"),b={render:function(n,s){const a=(0,p.up)("RouterLink"),b=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("nav",t,[(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#introduction"},{default:(0,p.w5)((()=>[o])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#timer-initialization"},{default:(0,p.w5)((()=>[c])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#usage"},{default:(0,p.w5)((()=>[l])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#reference"},{default:(0,p.w5)((()=>[i])),_:1})])])]),r,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",u,[k,(0,p.Wm)(b)])])])],64)}}}}]);