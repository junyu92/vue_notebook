"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[5518],{6548:(e,n,t)=>{t.r(n),t.d(n,{data:()=>r});const r={key:"v-8235d054",path:"/rust/pin.html",title:"Pin",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Reference",slug:"reference",children:[]}],filePathRelative:"rust/pin.md",git:{updatedTime:1629972527e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:1}]}}},1721:(e,n,t)=>{t.r(n),t.d(n,{default:()=>h});var r=t(6252);const a=(0,r.uE)('<h1 id="pin" tabindex="-1"><a class="header-anchor" href="#pin" aria-hidden="true">#</a> Pin</h1><p>The Pin type wraps pointer types, guaranteeing that the values behind the pointer won&#39;t be moved. For example, <code>Pin&lt;&amp;mut T&gt;</code>, <code>Pin&lt;&amp;T&gt;</code>, <code>Pin&lt;Box&lt;T&gt;&gt;</code> all guarantee that <code>T</code> won&#39;t be moved if <code>T: !Unpin</code>.</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>',3),i={href:"https://rust-lang.github.io/async-book/04_pinning/01_chapter.html",target:"_blank",rel:"noopener noreferrer"},o=(0,r.Uk)("Pinning"),l={href:"https://doc.rust-lang.org/std/pin/index.html",target:"_blank",rel:"noopener noreferrer"},d=(0,r.Uk)("Module std::pin"),h={render:function(e,n){const t=(0,r.up)("OutboundLink");return(0,r.wg)(),(0,r.iD)(r.HY,null,[a,(0,r._)("ul",null,[(0,r._)("li",null,[(0,r._)("a",i,[o,(0,r.Wm)(t)])]),(0,r._)("li",null,[(0,r._)("a",l,[d,(0,r.Wm)(t)])])])],64)}}}}]);