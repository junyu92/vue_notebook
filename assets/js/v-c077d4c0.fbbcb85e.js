"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[7534],{5070:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-c077d4c0",path:"/kernel/misc/export_symbol.html",title:"Export Kernel Symbol",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Modversion",slug:"modversion",children:[]},{level:2,title:"EXPORT_SYMBOL",slug:"export-symbol",children:[{level:3,title:"Macro",slug:"macro",children:[]},{level:3,title:"Linking",slug:"linking",children:[]},{level:3,title:"Resolve undefined symbol for Module",slug:"resolve-undefined-symbol-for-module",children:[]}]},{level:2,title:"Question",slug:"question",children:[]},{level:2,title:"Reference",slug:"reference",children:[]}],filePathRelative:"kernel/misc/export_symbol.md",git:{updatedTime:1629972527e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:2}]}}},6673:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="export-kernel-symbol" tabindex="-1"><a class="header-anchor" href="#export-kernel-symbol" aria-hidden="true">#</a> Export Kernel Symbol</h1><h2 id="modversion" tabindex="-1"><a class="header-anchor" href="#modversion" aria-hidden="true">#</a> Modversion</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_MODVERSIONS</span></span>\n<span class="token comment">/* Mark the CRC weak since genksyms apparently decides not to\n * generate a checksums for some symbols */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>CONFIG_MODULE_REL_CRCS<span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__CRC_SYMBOL</span><span class="token expression"><span class="token punctuation">(</span>sym<span class="token punctuation">,</span> sec<span class="token punctuation">)</span>                                          </span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token keyword">asm</span><span class="token punctuation">(</span></span><span class="token string">&quot;   .section \\&quot;___kcrctab&quot;</span> <span class="token expression">sec </span><span class="token string">&quot;+&quot;</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">sym</span> </span></span><span class="token string">&quot;\\&quot;, \\&quot;a\\&quot;  \\n&quot;</span>     <span class="token punctuation">\\</span>\n            <span class="token string">&quot;   .weak   __crc_&quot;</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">sym</span> </span></span><span class="token string">&quot;                          \\n&quot;</span>     <span class="token punctuation">\\</span>\n            <span class="token string">&quot;   .long   __crc_&quot;</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">sym</span> </span></span><span class="token string">&quot; - .                      \\n&quot;</span>     <span class="token punctuation">\\</span>\n            <span class="token string">&quot;   .previous                                       \\n&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__CRC_SYMBOL</span><span class="token expression"><span class="token punctuation">(</span>sym<span class="token punctuation">,</span> sec<span class="token punctuation">)</span>                                          </span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token keyword">asm</span><span class="token punctuation">(</span></span><span class="token string">&quot;   .section \\&quot;___kcrctab&quot;</span> <span class="token expression">sec </span><span class="token string">&quot;+&quot;</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">sym</span> </span></span><span class="token string">&quot;\\&quot;, \\&quot;a\\&quot;  \\n&quot;</span>     <span class="token punctuation">\\</span>\n            <span class="token string">&quot;   .weak   __crc_&quot;</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">sym</span> </span></span><span class="token string">&quot;                          \\n&quot;</span>     <span class="token punctuation">\\</span>\n            <span class="token string">&quot;   .long   __crc_&quot;</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">sym</span> </span></span><span class="token string">&quot;                          \\n&quot;</span>     <span class="token punctuation">\\</span>\n            <span class="token string">&quot;   .previous                                       \\n&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__CRC_SYMBOL</span><span class="token expression"><span class="token punctuation">(</span>sym<span class="token punctuation">,</span> sec<span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="export-symbol" tabindex="-1"><a class="header-anchor" href="#export-symbol" aria-hidden="true">#</a> EXPORT_SYMBOL</h2><p>In this chapter, we are going to analyze <code>EXPORT_SYMBOL</code>.</p><h3 id="macro" tabindex="-1"><a class="header-anchor" href="#macro" aria-hidden="true">#</a> Macro</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__ADDRESSABLE</span><span class="token expression"><span class="token punctuation">(</span>sym<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">__section</span><span class="token punctuation">(</span></span><span class="token string">&quot;.discard.addressable&quot;</span><span class="token expression"><span class="token punctuation">)</span> __used </span><span class="token punctuation">\\</span>\n                <span class="token expression"><span class="token function">__PASTE</span><span class="token punctuation">(</span>__addressable_</span><span class="token punctuation">##</span><span class="token expression">sym<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>sym<span class="token punctuation">;</span></span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__KSYMTAB_ENTRY</span><span class="token expression"><span class="token punctuation">(</span>sym<span class="token punctuation">,</span> sec<span class="token punctuation">)</span>                                       </span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">kernel_symbol</span> __ksymtab_</span><span class="token punctuation">##</span><span class="token expression">sym               </span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">section</span><span class="token punctuation">(</span></span><span class="token string">&quot;___ksymtab&quot;</span> <span class="token expression">sec </span><span class="token string">&quot;+&quot;</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">sym</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">)</span>       </span></span></span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>sym<span class="token punctuation">,</span> __kstrtab_</span><span class="token punctuation">##</span><span class="token expression">sym <span class="token punctuation">}</span></span></span>\n\n<span class="token comment">/* For every exported symbol, place a struct in the __ksymtab section */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">___EXPORT_SYMBOL</span><span class="token expression"><span class="token punctuation">(</span>sym<span class="token punctuation">,</span> sec<span class="token punctuation">)</span>                                      </span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token keyword">extern</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>sym<span class="token punctuation">)</span> sym<span class="token punctuation">;</span>                                         </span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token function">__CRC_SYMBOL</span><span class="token punctuation">(</span>sym<span class="token punctuation">,</span> sec<span class="token punctuation">)</span>                                          </span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __kstrtab_</span><span class="token punctuation">##</span><span class="token expression">sym<span class="token punctuation">[</span><span class="token punctuation">]</span>                             </span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">section</span><span class="token punctuation">(</span></span><span class="token string">&quot;__ksymtab_strings&quot;</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> used<span class="token punctuation">,</span> <span class="token function">aligned</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token operator">=</span> #sym<span class="token punctuation">;</span>                                                         </span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token function">__KSYMTAB_ENTRY</span><span class="token punctuation">(</span>sym<span class="token punctuation">,</span> sec<span class="token punctuation">)</span></span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__EXPORT_SYMBOL</span> <span class="token expression">___EXPORT_SYMBOL</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPORT_SYMBOL</span><span class="token expression"><span class="token punctuation">(</span>sym<span class="token punctuation">)</span>                                      </span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token function">__EXPORT_SYMBOL</span><span class="token punctuation">(</span>sym<span class="token punctuation">,</span> </span><span class="token string">&quot;&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPORT_SYMBOL_GPL</span><span class="token expression"><span class="token punctuation">(</span>sym<span class="token punctuation">)</span>                                  </span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token function">__EXPORT_SYMBOL</span><span class="token punctuation">(</span>sym<span class="token punctuation">,</span> </span><span class="token string">&quot;_gpl&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EXPORT_SYMBOL_GPL_FUTURE</span><span class="token expression"><span class="token punctuation">(</span>sym<span class="token punctuation">)</span>                           </span><span class="token punctuation">\\</span>\n        <span class="token expression"><span class="token function">__EXPORT_SYMBOL</span><span class="token punctuation">(</span>sym<span class="token punctuation">,</span> </span><span class="token string">&quot;_gpl_future&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>For each exported symbol, al least the following is defined by EXPORT_SYMBOL():</p><ul><li><p><code>__kstrtab_&lt;symbol_name&gt;</code> - name of the symbol as a string</p></li><li><p><code>__ksymtab_&lt;symbol_name&gt;</code> - a structure with the information about the symbol: its address, address of <code>__kstrtab_&lt;symbol_name&gt;</code>, etc. It is typed with <code>struct kernel_symbol</code></p></li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">kernel_symbol</span> <span class="token punctuation">{</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> value<span class="token punctuation">;</span>\n        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>value</code> is the address of the symbol. <code>name</code> is the aforementioned variable <code>kstrtab_sym</code>.</p><ul><li><code>__kcrctab_&lt;symbol_name&gt;</code> - address of the control sum (CRC) of the symbol - it is used, for example, to check if the kernel or a module provides an exactly the same symbol as needed by a given kernel module. If a module requires a symbol with a given name and CRC and the kernel provides a symbol with that name but a different CRC (e.g. if the module was compiled for a different kernel version), the module loader will refuse to load that kernel module (unless this check is disabled).</li></ul><p>These variables are stored in different section, <code>kstrtab_{sym}</code> is putting whthin section <code>__ksymtab_strings</code> and <code>ksymtab+&lt;sym&gt;</code> is putting within section <code>___ksymtab</code>.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Assume that we export a symbol via</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>vectors<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Expand it we can get</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">extern</span> <span class="token keyword">char</span> vectors<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">extern</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>vectors<span class="token punctuation">)</span> vectors<span class="token punctuation">;</span>\n<span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">&quot;   .section \\&quot;___kcrctab+vectors\\&quot;, \\&quot;a\\&quot;  \\n&quot;</span>\n    <span class="token string">&quot;   .weak   __crc_vectors                   \\n&quot;</span>\n    <span class="token string">&quot;   .long   __crc_vectors                   \\n&quot;</span>\n    <span class="token string">&quot;   .previous                               \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __kstrtab_vectors<span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">section</span><span class="token punctuation">(</span><span class="token string">&quot;__ksymtab_strings&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> used<span class="token punctuation">,</span> <span class="token function">aligned</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span>\n                <span class="token string">&quot;vectors&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">__section__</span><span class="token punctuation">(</span><span class="token string">&quot;.discard.addressable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__used__<span class="token punctuation">)</span><span class="token punctuation">)</span> __addressable_vectors55 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>vectors<span class="token punctuation">;</span>\n<span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">&quot;   .section \\&quot;___ksymtab+vectors\\&quot;, \\&quot;a\\&quot;          \\n&quot;</span>\n    <span class="token string">&quot;   .balign 4                                       \\n&quot;</span>\n    <span class="token string">&quot;__ksymtab_vectors:                                 \\n&quot;</span>\n    <span class="token string">&quot;   .long   vectors - .                             \\n&quot;</span>\n    <span class="token string">&quot;   .long   __kstrtab_vectors - .                   \\n&quot;</span>\n    <span class="token string">&quot;   .long   0                                       \\n&quot;</span>\n    <span class="token string">&quot;   .previous                                       \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></div><h3 id="linking" tabindex="-1"><a class="header-anchor" href="#linking" aria-hidden="true">#</a> Linking</h3><p>Variables declared by <code>EXPORT_SYMBOL</code> are linked into <code>vmlinux</code>.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// include/asm-generic/vmlinux.lds.h</span>\n        <span class="token comment">/* Kernel symbol table: strings */</span>                              \\\n        __ksymtab_strings <span class="token operator">:</span> <span class="token function">AT</span><span class="token punctuation">(</span><span class="token function">ADDR</span><span class="token punctuation">(</span>__ksymtab_strings<span class="token punctuation">)</span> <span class="token operator">-</span> LOAD_OFFSET<span class="token punctuation">)</span> <span class="token punctuation">{</span> \\\n                <span class="token operator">*</span><span class="token punctuation">(</span>__ksymtab_strings<span class="token punctuation">)</span>                                    \\\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">/* Kernel symbol table: Normal symbols */</span>                       \\\n        __ksymtab         <span class="token operator">:</span> <span class="token function">AT</span><span class="token punctuation">(</span><span class="token function">ADDR</span><span class="token punctuation">(</span>__ksymtab<span class="token punctuation">)</span> <span class="token operator">-</span> LOAD_OFFSET<span class="token punctuation">)</span> <span class="token punctuation">{</span>         \\\n                __start___ksymtab <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">;</span>                                  \\\n                <span class="token function">KEEP</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SORT</span><span class="token punctuation">(</span>___ksymtab<span class="token operator">+</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                             \\\n                __stop___ksymtab <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">;</span>                                   \\\n        <span class="token punctuation">}</span>                                                               \\\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>For example.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># readelf -a vmlinux\n      38n: ffff00001102e640     0 NOTYPE  LOCAL  DEFAULT    5 __ksymtab_irq_stat\n      389: ffff00001103fb52     9 OBJECT  LOCAL  DEFAULT    7 __kstrtab_irq_stat\n   137299: ffff0000111cf380    64 OBJECT  GLOBAL DEFAULT   17 irq_stat\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="resolve-undefined-symbol-for-module" tabindex="-1"><a class="header-anchor" href="#resolve-undefined-symbol-for-module" aria-hidden="true">#</a> Resolve undefined symbol for Module</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">simplify_symbols</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">module</span> <span class="token operator">*</span>mod<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">load_info</span> <span class="token operator">*</span>info<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        Elf_Shdr <span class="token operator">*</span>symsec <span class="token operator">=</span> <span class="token operator">&amp;</span>info<span class="token operator">-&gt;</span>sechdrs<span class="token punctuation">[</span>info<span class="token operator">-&gt;</span>index<span class="token punctuation">.</span>sym<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        Elf_Sym <span class="token operator">*</span>sym <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>symsec<span class="token operator">-&gt;</span>sh_addr<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> secbase<span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">kernel_symbol</span> <span class="token operator">*</span>ksym<span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> symsec<span class="token operator">-&gt;</span>sh_size <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Elf_Sym<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// ...</span>\n\n                <span class="token keyword">case</span> SHN_UNDEF<span class="token operator">:</span>\n                        ksym <span class="token operator">=</span> <span class="token function">resolve_symbol_wait</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> info<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token comment">/* Ok if resolved.  */</span>\n                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ksym <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">IS_ERR</span><span class="token punctuation">(</span>ksym<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                                sym<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>st_value <span class="token operator">=</span> <span class="token function">kernel_symbol_value</span><span class="token punctuation">(</span>ksym<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                                <span class="token keyword">break</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span>\n\n                        <span class="token comment">/* Ok if weak.  */</span>\n                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ksym <span class="token operator">&amp;&amp;</span> <span class="token function">ELF_ST_BIND</span><span class="token punctuation">(</span>sym<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>st_info<span class="token punctuation">)</span> <span class="token operator">==</span> STB_WEAK<span class="token punctuation">)</span>\n                                <span class="token keyword">break</span><span class="token punctuation">;</span>\n\n                        ret <span class="token operator">=</span> <span class="token function">PTR_ERR</span><span class="token punctuation">(</span>ksym<span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">:</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span>\n                        <span class="token function">pr_warn</span><span class="token punctuation">(</span><span class="token string">&quot;%s: Unknown symbol %s (err %d)\\n&quot;</span><span class="token punctuation">,</span>\n                                mod<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token keyword">break</span><span class="token punctuation">;</span>\n\n                <span class="token comment">// ...</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question" aria-hidden="true">#</a> Question</h2><ol><li><code>EXPORT_SYMBOL</code> works fine in <code>.c</code> but fails in <code>.S</code> and the fail message is <code>relocation R_AARCH64_ABS32 against `__crc_&lt;symbol&gt;&#39; can not be used when making a shared object</code></li></ol><p><code>ld -shared hello.o</code> doesn&#39;t allow weak symbol in <code>hello.o</code>, however <code>EXPORT_SYMBOL</code> generates a weak symbol <code>__crc_&lt;symbol&gt;&gt;</code>.</p><p>Both &#39;.c&#39; and &#39;.S&#39; are compiled with gcc.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>gcc -Wp,-MD,arch/arm64/mm/.mmu.o.d  -nostdinc -isystem /usr/lib/gcc/aarch64-linux-gnu/8/include -I./arch/arm64/include -I./arch/arm64/include/generated  -I./include -I./arch/arm64/include/uapi -I./arch/arm64/include/generated/uapi -I./include/uapi -I./include/generated/uapi -include ./include/linux/kconfig.h -include ./include/linux/compiler_types.h -D__KERNEL__ -mlittle-endian -DKASAN_SHADOW_SCALE_SHIFT=3 -Wall -Wundef -Werror=strict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE -Werror=implicit-function-declaration -Werror=implicit-int -Wno-format-security -std=gnu89 -mgeneral-regs-only -DCONFIG_AS_LSE=1 -DCONFIG_CC_HAS_K_CONSTRAINT=1 -fno-asynchronous-unwind-tables -Wno-psabi -mabi=lp64 -DKASAN_SHADOW_SCALE_SHIFT=3 -fno-delete-null-pointer-checks -Wno-frame-address -Wno-format-truncation -Wno-format-overflow -O2 --param=allow-store-data-races=0 -Wframe-larger-than=2048 -fstack-protector-strong -Wno-unused-but-set-variable -Wimplicit-fallthrough -Wno-unused-const-variable -fno-omit-frame-pointer -fno-optimize-sibling-calls -fno-var-tracking-assignments -g -pg -Wdeclaration-after-statement -Wvla -Wno-pointer-sign -Wno-stringop-truncation -Wno-array-bounds -Wno-stringop-overflow -Wno-restrict -Wno-maybe-uninitialized -fno-strict-overflow -fno-merge-all-constants -fmerge-constants -fno-stack-check -fconserve-stack -Werror=date-time -Werror=incompatible-pointer-types -Werror=designated-init -fmacro-prefix-map=./= -Wno-packed-not-aligned    -DKBUILD_BASENAME=&#39;&quot;mmu&quot;&#39; -DKBUILD_MODNAME=&#39;&quot;mmu&quot;&#39; -c -o arch/arm64/mm/mmu.o arch/arm64/mm/mmu.c\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Nonetheless there is an extra stage for compiling. This stage resolves weak symbol for the object of &#39;.c&#39; but don&#39;t resolve for the object of &#39;.S&#39;. I don&#39;t know why.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>if objdump -h arch/arm64/mm/mmu.o | grep -q __ksymtab; then gcc -E -D__GENKSYMS__ -Wp,-MD,arch/arm64/mm/.mmu.o.d  -nostdinc -isystem /usr/lib/gcc/aarch64-linux-gnu/8/include -I./arch/arm64/include -I./arch/arm64/include/generated  -I./include -I./arch/arm64/include/uapi -I./arch/arm64/include/generated/uapi -I./include/uapi -I./include/generated/uapi -include ./include/linux/kconfig.h -include ./include/linux/compiler_types.h -D__KERNEL__ -mlittle-endian -DKASAN_SHADOW_SCALE_SHIFT=3 -Wall -Wundef -Werror=strict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE -Werror=implicit-function-declaration -Werror=implicit-int -Wno-format-security -std=gnu89 -mgeneral-regs-only -DCONFIG_AS_LSE=1 -DCONFIG_CC_HAS_K_CONSTRAINT=1 -fno-asynchronous-unwind-tables -Wno-psabi -mabi=lp64 -DKASAN_SHADOW_SCALE_SHIFT=3 -fno-delete-null-pointer-checks -Wno-frame-address -Wno-format-truncation -Wno-format-overflow -O2 --param=allow-store-data-races=0 -Wframe-larger-than=2048 -fstack-protector-strong -Wno-unused-but-set-variable -Wimplicit-fallthrough -Wno-unused-const-variable -fno-omit-frame-pointer -fno-optimize-sibling-calls -fno-var-tracking-assignments -g -pg -Wdeclaration-after-statement -Wvla -Wno-pointer-sign -Wno-stringop-truncation -Wno-array-bounds -Wno-stringop-overflow -Wno-restrict -Wno-maybe-uninitialized -fno-strict-overflow -fno-merge-all-constants -fmerge-constants -fno-stack-check -fconserve-stack -Werror=date-time -Werror=incompatible-pointer-types -Werror=designated-init -fmacro-prefix-map=./= -Wno-packed-not-aligned    -DKBUILD_BASENAME=&#39;&quot;mmu&quot;&#39; -DKBUILD_MODNAME=&#39;&quot;mmu&quot;&#39; arch/arm64/mm/mmu.c | scripts/genksyms/genksyms    -r /dev/null &gt; arch/arm64/mm/.tmp_mmu.ver; ld  -EL  -maarch64elf -r -o arch/arm64/mm/.tmp_mmu.o arch/arm64/mm/mmu.o -T arch/arm64/mm/.tmp_mmu.ver; mv -f arch/arm64/mm/.tmp_mmu.o arch/arm64/mm/mmu.o; rm -f arch/arm64/mm/.tmp_mmu.ver; fi\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2><blockquote><p>https://stackoverflow.com/questions/18487032/what-is-ksymtab-in-linux-kernel</p></blockquote>',30),p={render:function(n,s){return e}}}}]);