"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[2910],{4452:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-0fac61c4",path:"/kernel/misc/alternative_cb.html",title:"Alternative CB on ARM64",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Altinstructions when modules is loading",slug:"altinstructions-when-modules-is-loading",children:[]},{level:2,title:".altinstructions section",slug:"altinstructions-section",children:[]},{level:2,title:"The last stage",slug:"the-last-stage",children:[]}],filePathRelative:"kernel/misc/alternative_cb.md",git:{updatedTime:1629972527e3,contributors:[{name:"Zhang Junyu",email:"zhangjunyu.92@bytedance.com",commits:1}]}}},8230:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="alternative-cb-on-arm64" tabindex="-1"><a class="header-anchor" href="#alternative-cb-on-arm64" aria-hidden="true">#</a> Alternative CB on ARM64</h1><p>With the help of <em>alternative_cb</em>, Instruction can be altered at runtime while kernel/module is loading.</p><p>For example,</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">__kern_hyp_va</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> v<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token function">ALTERNATIVE_CB</span><span class="token punctuation">(</span><span class="token string">&quot;and %0, %0, #1\\n&quot;</span>\n                                    <span class="token string">&quot;ror %0, %0, #1\\n&quot;</span>\n                                    <span class="token string">&quot;add %0, %0, #0\\n&quot;</span>\n                                    <span class="token string">&quot;add %0, %0, #0, lsl 12\\n&quot;</span>\n                                    <span class="token string">&quot;ror %0, %0, #63\\n&quot;</span><span class="token punctuation">,</span>\n                                    kvm_update_va_mask<span class="token punctuation">)</span>\n                     <span class="token operator">:</span> <span class="token string">&quot;+r&quot;</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> v<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="altinstructions-when-modules-is-loading" tabindex="-1"><a class="header-anchor" href="#altinstructions-when-modules-is-loading" aria-hidden="true">#</a> Altinstructions when modules is loading</h2><p>The very last stage of loading module is to <code>apply_alternatives_module</code>.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">module_finalize</span><span class="token punctuation">(</span><span class="token keyword">const</span> Elf_Ehdr <span class="token operator">*</span>hdr<span class="token punctuation">,</span>\n                    <span class="token keyword">const</span> Elf_Shdr <span class="token operator">*</span>sechdrs<span class="token punctuation">,</span>\n                    <span class="token keyword">struct</span> <span class="token class-name">module</span> <span class="token operator">*</span>me<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">const</span> Elf_Shdr <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">*</span>se<span class="token punctuation">;</span>\n        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>secstrs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>hdr <span class="token operator">+</span> sechdrs<span class="token punctuation">[</span>hdr<span class="token operator">-&gt;</span>e_shstrndx<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_offset<span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>s <span class="token operator">=</span> sechdrs<span class="token punctuation">,</span> se <span class="token operator">=</span> sechdrs <span class="token operator">+</span> hdr<span class="token operator">-&gt;</span>e_shnum<span class="token punctuation">;</span> s <span class="token operator">&lt;</span> se<span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;.altinstructions&quot;</span><span class="token punctuation">,</span> secstrs <span class="token operator">+</span> s<span class="token operator">-&gt;</span>sh_name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n                        <span class="token function">apply_alternatives_module</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>s<span class="token operator">-&gt;</span>sh_addr<span class="token punctuation">,</span> s<span class="token operator">-&gt;</span>sh_size<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_ARM64_MODULE_PLTS</span></span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_DYNAMIC_FTRACE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n                    <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;.text.ftrace_trampoline&quot;</span><span class="token punctuation">,</span> secstrs <span class="token operator">+</span> s<span class="token operator">-&gt;</span>sh_name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                        me<span class="token operator">-&gt;</span>arch<span class="token punctuation">.</span>ftrace_trampoline <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>s<span class="token operator">-&gt;</span>sh_addr<span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>As we can see above, <code>module_finalize</code> invokes <code>apply_alternatives_module</code> to <code>.altinstructions</code> section.</p><p>What&#39;s the content of this section?</p><h2 id="altinstructions-section" tabindex="-1"><a class="header-anchor" href="#altinstructions-section" aria-hidden="true">#</a> <code>.altinstructions</code> section</h2><p><code>__ALTERNATIVE_CFG</code> pushes <code>ALTINSTR_ENTRY</code> into <code>.altinstructions</code> section.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>        <span class="token string">&quot;.pushsection .altinstructions,\\&quot;a\\&quot;\\n&quot;</span>                         \\\n        <span class="token function">ALTINSTR_ENTRY</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span>cb<span class="token punctuation">)</span>                                      \\\n        <span class="token string">&quot;.popsection\\n&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>ALTINSTR_ENTRY</code> is also a macro.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALTINSTR_ENTRY</span><span class="token expression"><span class="token punctuation">(</span>feature<span class="token punctuation">,</span>cb<span class="token punctuation">)</span>                                            </span><span class="token punctuation">\\</span>\n        <span class="token string">&quot; .word 661b - .\\n&quot;</span>                             <span class="token comment">/* label           */</span> <span class="token punctuation">\\</span>\n        <span class="token string">&quot; .if &quot;</span> <span class="token expression"><span class="token function">__stringify</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> </span><span class="token string">&quot; == 0\\n&quot;</span>                                     <span class="token punctuation">\\</span>\n        <span class="token string">&quot; .word 663f - .\\n&quot;</span>                             <span class="token comment">/* new instruction */</span> <span class="token punctuation">\\</span>\n        <span class="token string">&quot; .else\\n&quot;</span>                                                            <span class="token punctuation">\\</span>\n        <span class="token string">&quot; .word &quot;</span> <span class="token expression"><span class="token function">__stringify</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> </span><span class="token string">&quot;- .\\n&quot;</span>               <span class="token comment">/* callback */</span>        <span class="token punctuation">\\</span>\n        <span class="token string">&quot; .endif\\n&quot;</span>                                                           <span class="token punctuation">\\</span>\n        <span class="token string">&quot; .hword &quot;</span> <span class="token expression"><span class="token function">__stringify</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span> </span><span class="token string">&quot;\\n&quot;</span>            <span class="token comment">/* feature bit     */</span> <span class="token punctuation">\\</span>\n        <span class="token string">&quot; .byte 662b-661b\\n&quot;</span>                            <span class="token comment">/* source len      */</span> <span class="token punctuation">\\</span>\n        <span class="token string">&quot; .byte 664f-663f\\n&quot;</span>                            <span class="token comment">/* replacement len */</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>The corresponding structure in C is <code>struct alt_instr</code>.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">alt_instr</span> <span class="token punctuation">{</span>\n        s32 orig_offset<span class="token punctuation">;</span>        <span class="token comment">/* offset to original instruction */</span>\n        s32 alt_offset<span class="token punctuation">;</span>         <span class="token comment">/* offset to replacement instruction */</span>\n        u16 cpufeature<span class="token punctuation">;</span>         <span class="token comment">/* cpufeature bit set for replacement */</span>\n        u8  orig_len<span class="token punctuation">;</span>           <span class="token comment">/* size of original instruction(s) */</span>\n        u8  alt_len<span class="token punctuation">;</span>            <span class="token comment">/* size of new instruction(s), &lt;= orig_len */</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="the-last-stage" tabindex="-1"><a class="header-anchor" href="#the-last-stage" aria-hidden="true">#</a> The last stage</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__apply_alternatives</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>alt_region<span class="token punctuation">,</span>  bool is_module<span class="token punctuation">,</span>\n                                 <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>feature_mask<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n        <span class="token keyword">struct</span> <span class="token class-name">alt_instr</span> <span class="token operator">*</span>alt<span class="token punctuation">;</span>\n        <span class="token keyword">struct</span> <span class="token class-name">alt_region</span> <span class="token operator">*</span>region <span class="token operator">=</span> alt_region<span class="token punctuation">;</span>\n        __le32 <span class="token operator">*</span>origptr<span class="token punctuation">,</span> <span class="token operator">*</span>updptr<span class="token punctuation">;</span>\n        <span class="token class-name">alternative_cb_t</span> alt_cb<span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>alt <span class="token operator">=</span> region<span class="token operator">-&gt;</span>begin<span class="token punctuation">;</span> alt <span class="token operator">&lt;</span> region<span class="token operator">-&gt;</span>end<span class="token punctuation">;</span> alt<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">int</span> nr_inst<span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">test_bit</span><span class="token punctuation">(</span>alt<span class="token operator">-&gt;</span>cpufeature<span class="token punctuation">,</span> feature_mask<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                        <span class="token keyword">continue</span><span class="token punctuation">;</span>\n\n                <span class="token comment">/* Use ARM64_CB_PATCH as an unconditional patch */</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>alt<span class="token operator">-&gt;</span>cpufeature <span class="token operator">&lt;</span> ARM64_CB_PATCH <span class="token operator">&amp;&amp;</span>\n                    <span class="token operator">!</span><span class="token function">cpus_have_cap</span><span class="token punctuation">(</span>alt<span class="token operator">-&gt;</span>cpufeature<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                        <span class="token keyword">continue</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>alt<span class="token operator">-&gt;</span>cpufeature <span class="token operator">==</span> ARM64_CB_PATCH<span class="token punctuation">)</span>\n                        <span class="token function">BUG_ON</span><span class="token punctuation">(</span>alt<span class="token operator">-&gt;</span>alt_len <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">else</span>\n                        <span class="token function">BUG_ON</span><span class="token punctuation">(</span>alt<span class="token operator">-&gt;</span>alt_len <span class="token operator">!=</span> alt<span class="token operator">-&gt;</span>orig_len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token function">pr_info_once</span><span class="token punctuation">(</span><span class="token string">&quot;patching kernel code\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                origptr <span class="token operator">=</span> <span class="token function">ALT_ORIG_PTR</span><span class="token punctuation">(</span>alt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                updptr <span class="token operator">=</span> is_module <span class="token operator">?</span> origptr <span class="token operator">:</span> <span class="token function">lm_alias</span><span class="token punctuation">(</span>origptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                nr_inst <span class="token operator">=</span> alt<span class="token operator">-&gt;</span>orig_len <span class="token operator">/</span> AARCH64_INSN_SIZE<span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>alt<span class="token operator">-&gt;</span>cpufeature <span class="token operator">&lt;</span> ARM64_CB_PATCH<span class="token punctuation">)</span>\n                        alt_cb <span class="token operator">=</span> patch_alternative<span class="token punctuation">;</span>\n                <span class="token keyword">else</span>\n                        alt_cb  <span class="token operator">=</span> <span class="token function">ALT_REPL_PTR</span><span class="token punctuation">(</span>alt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token function">alt_cb</span><span class="token punctuation">(</span>alt<span class="token punctuation">,</span> origptr<span class="token punctuation">,</span> updptr<span class="token punctuation">,</span> nr_inst<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_module<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token function">clean_dcache_range_nopatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u64<span class="token punctuation">)</span>origptr<span class="token punctuation">,</span>\n                                                   <span class="token punctuation">(</span>u64<span class="token punctuation">)</span><span class="token punctuation">(</span>origptr <span class="token operator">+</span> nr_inst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">/*\n         * The core module code takes care of cache maintenance in\n         * flush_module_icache().\n         */</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_module<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">dsb</span><span class="token punctuation">(</span>ish<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">__flush_icache_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">isb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token comment">/* Ignore ARM64_CB bit from feature mask */</span>\n                <span class="token function">bitmap_or</span><span class="token punctuation">(</span>applied_alternatives<span class="token punctuation">,</span> applied_alternatives<span class="token punctuation">,</span>\n                          feature_mask<span class="token punctuation">,</span> ARM64_NCAPS<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">bitmap_and</span><span class="token punctuation">(</span>applied_alternatives<span class="token punctuation">,</span> applied_alternatives<span class="token punctuation">,</span>\n                           cpu_hwcaps<span class="token punctuation">,</span> ARM64_NCAPS<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><p>The core is</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>                <span class="token keyword">if</span> <span class="token punctuation">(</span>alt<span class="token operator">-&gt;</span>cpufeature <span class="token operator">&lt;</span> ARM64_CB_PATCH<span class="token punctuation">)</span>\n                        alt_cb <span class="token operator">=</span> patch_alternative<span class="token punctuation">;</span>\n                <span class="token keyword">else</span>\n                        alt_cb  <span class="token operator">=</span> <span class="token function">ALT_REPL_PTR</span><span class="token punctuation">(</span>alt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token function">alt_cb</span><span class="token punctuation">(</span>alt<span class="token punctuation">,</span> origptr<span class="token punctuation">,</span> updptr<span class="token punctuation">,</span> nr_inst<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>In the first example, <code>kvm_update_va_mask(alt, origptr, updptr, nr_inst)</code> should be invoked.</p>',21),t={render:function(n,s){return p}}}}]);